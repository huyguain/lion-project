{"version":3,"sources":["../../src/controller/candidate.js"],"names":["createCanidate","req","res","dataCandidate","body","email","dataCandi","data","dataEnglish","_id","dataEntryEnglish","dataCandidateUpdate","status","end","console","log","json","success","message","getAllCandidate","getCandidateById","id","params","importCandidate","editCandidate","dataUpdate","deleteCandidate","check","checkEntry","next","arrCandidate","CandidateExist","CanidateImportError","EnglishCreateError","CandidateUpdateError","count","newCandidate","checkCandidate","push","language","length","resCandidate","candidateImported","result"],"mappings":"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","file":"candidate.js","sourcesContent":["import {\n    _createCanidate,\n    _getCanidateByEmail,\n    _getAllCandidate,\n    _getCandidateById,\n    _editCandidate,\n    _deleteCandidate,\n    _updateCandidate\n} from '../models/candidate'\n//create canidate\nimport { _getEnglishTest } from '../models/englishExam'\nimport { _deleteEntryCodeByCandi, _createEntryEnglish } from '../models/entryCode'\nexport const createCanidate = async (req, res) => {\n    try {\n        const { dataCandidate } = req.body;\n        if (!dataCandidate) {\n            throw 'No Data!'\n        } else {\n            const dataCandi = await _getCanidateByEmail(dataCandidate.email);\n            if (dataCandi) {\n                throw ('Email exited!')\n            } else {\n                let data = await _createCanidate(dataCandidate);\n                if (data) {\n                    let dataEnglish = await _getEnglishTest();\n                    if (!dataEnglish || !dataEnglish._id) {\n                        throw (`Can't Get English Test !`)\n                    } else {\n                        let dataEntryEnglish = await _createEntryEnglish(data._id, dataEnglish._id)\n                        if (dataEntryEnglish) {\n                            let dataCandidateUpdate = await _updateCandidate(data._id, dataEntryEnglish._id);\n                            if (dataCandidateUpdate) {\n                                res.status(204).end()\n                            } else {\n                                throw (`Can't Update Candidate!`)\n                            }\n                        } else {\n                            throw (`Can't create Enrty English !`)\n                        }\n                    }\n                } else {\n                    throw ('Create Candidate Error!')\n                }\n            }\n        }\n    } catch (err) {\n        console.log(err);\n        res.status(203).json({\n            success: false,\n            message: err\n        })\n    }\n}\n//get all candidate\nexport const getAllCandidate = async (req, res) => {\n    try {\n        const dataCandidate = await _getAllCandidate();\n        res.status(200).json({\n            success: true,\n            dataCandidate\n        })\n    } catch (err) {\n        res.status(403).json({\n            success: false,\n            message: err\n        })\n    }\n}\n//getCandidateById\nexport const getCandidateById = async (req, res) => {\n    try {\n        const { id } = req.params;\n        if (!id) {\n            importCandidate('No Data!')\n        } else {\n            let dataCandidate = await _getCandidateById(id);\n            if (dataCandidate) {\n                res.status(200).json({\n                    success: true,\n                    dataCandidate\n                })\n            } else {\n                throw (`Can't Get Candidate`)\n            }\n        }\n    } catch (err) {\n        res.status(203).json({\n            success: false,\n            message: err\n        })\n    }\n}\n//editCandidate\nexport const editCandidate = async (req, res) => {\n    try {\n        const { id } = req.params;\n        const { dataUpdate } = req.body;\n        console.log('dataUpdate', dataUpdate);\n        if (!id || !dataUpdate) {\n            throw ('No Data!')\n        } else {\n            let dataCandi = await _editCandidate(id, dataUpdate)\n            if (dataCandi) {\n                res.status(204).end()\n            } else {\n                throw (`Can't Update Candidate!`)\n            }\n        }\n    } catch (err) {\n        res.status(203).json({\n            success: false,\n            message: err\n        })\n    }\n}\n//deleteCandidate\nexport const deleteCandidate = async (req, res) => {\n    try {\n        const { id } = req.params;\n        if (!id) {\n            throw ('No Data!')\n        } else {\n            let check = await _deleteCandidate(id);\n            if (check) {\n                let checkEntry = await _deleteEntryCodeByCandi(id);\n                if (!checkEntry) {\n                    throw (`Can't Delete Entry Code`)\n                } else {\n                    res.status(204).end()\n                }\n            } else {\n                throw (`Can't Delete Candidate!`)\n            }\n        }\n    } catch (err) {\n        res.status(403).json({\n            success: false,\n            message: err\n        })\n    }\n}\n//importCandidate\nexport const importCandidate = async (req, res, next) => {\n    try {\n        const { arrCandidate } = req.body;\n        if (!arrCandidate) {\n            throw ('No Data')\n        } else {\n            let CandidateExist = 0;\n            let CanidateImportError = 0;\n            let EnglishCreateError = 0;\n            let CandidateUpdateError = 0;\n            let count = 0\n            let newCandidate = []\n            let dataEnglish = await _getEnglishTest();\n            if (!dataEnglish) {\n                throw ('English question is not exist !')\n            } else {\n                for (const dataCandidate of arrCandidate) {\n                    console.log('dataCandidate', dataCandidate)\n                    count++;\n                    const checkCandidate = await _getCanidateByEmail(dataCandidate.email);\n                    if (checkCandidate) {\n                        CandidateExist++;\n                    } else {\n                        let dataCandi = await _createCanidate(dataCandidate);\n                        if (!dataCandi) {\n                            CanidateImportError++;\n                        } else {\n                            let dataEntryEnglish = await _createEntryEnglish(dataCandi._id, dataEnglish._id)\n                            if (!dataEntryEnglish) {\n                                EnglishCreateError++;\n                            } else {\n                                let dataCandidateUpdate = await _updateCandidate(dataCandi._id, dataEntryEnglish._id)\n                                if (!dataCandidateUpdate) {\n                                    CandidateUpdateError++;\n                                } else {\n                                    newCandidate.push({ id: dataCandidateUpdate._id, language: dataCandidate.language })\n                                }\n                            }\n                        }\n                    }\n                    console.log('newCandidate', newCandidate)\n                    req.body.newCandidate = newCandidate\n                }\n                if (count === arrCandidate.length) {\n                    req.body.resCandidate = {\n                        candidateImported: newCandidate,\n                        success: true,\n                        result: `${count - CandidateExist}/${count}`,\n                        CanidateImportError: CanidateImportError,\n                        EnglishCreateError: EnglishCreateError,\n                        CandidateUpdateError: CandidateUpdateError,\n                    }\n                    console.log('ok')\n                    next()\n                }\n            }\n        }\n    } catch (err) {\n        res.status(203).json({\n            success: false,\n            message: err\n        })\n    }\n}"]}