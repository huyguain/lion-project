{"version":3,"sources":["../../src/controller/entryCode.js"],"names":["getAllEntryCode","req","res","dataEntryCode","status","json","success","message","getDataEntry","dataTemplate","dataCandidate","deleteEntryCode","params","idEntryCode","idCandidate","checkEntry","end","createEntryCode","body","candidateIds","deadline","testName","numberEasy","numberHard","numberMedium","language","templateId","idCandi","random","_","Promise","all","arrQuestion","length","dataQuestion","_id","payload","TO","email","code","console","log","autoCreateEntryCode","resCandidate","newCandidate","candidate","template","easy","medium","hard","randQuestion","Date","setMonth","getMonth","id","candidateImported","result","CanidateImportError","EnglishCreateError","CandidateUpdateError","regenerate","questionEasy","questionMedium","questionHard","concat","checkCode","timeNow","token","data","endTime","getTime","parse","showData","name","candidateId","firstName","lastName","mobile","question","questionIds","duration","passScore","englishExamId","questions","send","endTest","list_answer","err","finishTest","account","startTest","time","startTime","add","toDate","conditions","update","point","dataUpdate","listQuestion","dataEntry","listQuestions","map","q","title","multi","options","currentTime","essay","partNumber","urlImg1","urlImg2","reportTestDetail","endEnglishTest","getAllEnglishTest","englishEntries","countEnglishNotPoint","count","getQuestionEssayEnglishTest","question_essay","savePointEssayToDb","idExam"],"mappings":"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","file":"entryCode.js","sourcesContent":["import {\r\n    findCode, findEntryCode, updateEntryCode, endTestModel,\r\n    finishTestModel, checkTest, editEntryCode,\r\n    _getAllEntryCode, deleteEntryCodeModel,\r\n    detailResultTest,\r\n    _createEntryCode,\r\n    _regenerate,\r\n    _deleteEntryCode,\r\n    endEnglishTestModel,\r\n    getAllEnglishTestModel,\r\n    countEnglishNotPointModel,\r\n    getQuestionEssayEnglishTestModel,\r\n    savePointEssayToDbModel\r\n} from '../models/entryCode'\r\nimport {\r\n    _getAllCandidate,\r\n    _updateCandidate,\r\n    _updateCandidatePull\r\n} from '../models/candidate'\r\nimport { questionsRamdom, _questionsRamdom } from '../models/question'\r\nimport { addEntryCode } from '../models/entryCode'\r\nimport { getTestTemplate, _getAllTemplate, getTemplateDefaultEntry } from '../models/testTemplate'\r\nimport { generateToken, verifyToken } from '../lib/util'\r\nimport jwt from 'jsonwebtoken';\r\nimport config from '../config.js'\r\nimport moment from 'moment';\r\nimport { decode } from 'punycode';\r\nimport { send, sendApply } from '../lib/mailer';\r\n\r\n//Get EntryCode\r\nexport const getAllEntryCode = async (req, res) => {\r\n    try {\r\n        let dataEntryCode = await _getAllEntryCode();\r\n        if (dataEntryCode) {\r\n            res.status(200).json({\r\n                success: true,\r\n                dataEntryCode\r\n            })\r\n        } else {\r\n            throw (`Can't Get Entry Code !`)\r\n        }\r\n    } catch (err) {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//getDataEntry\r\nexport const getDataEntry = async (req, res) => {\r\n    try {\r\n        let dataTemplate = await _getAllTemplate();\r\n        if (!dataTemplate) {\r\n            throw ('Template Not Existed Please Create Template !')\r\n        } else {\r\n            let dataCandidate = await _getAllCandidate();\r\n            if (!dataCandidate) {\r\n                throw ('Candidate Not Existed Please Create Candidate !')\r\n            } else {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    dataCandidate,\r\n                    dataTemplate\r\n                })\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(400).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//deleteEntryCode  \r\nexport const deleteEntryCode = async (req, res) => {\r\n    try {\r\n        const { idEntryCode, idCandidate } = req.params\r\n        if (!idEntryCode || !idCandidate) {\r\n            throw ('No Date !')\r\n        } else {\r\n            let checkEntry = await _deleteEntryCode(idEntryCode);\r\n            if (!checkEntry) {\r\n                throw (`Can't Delete Entry Code !`)\r\n            } else {\r\n                let dataCandidate = await _updateCandidatePull(idCandidate, idEntryCode);\r\n                if (dataCandidate) {\r\n                    res.status(204).end()\r\n                } else {\r\n                    throw (`Can't Update Entry Code !`)\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n\r\n}\r\n//createEntryCode\r\nexport const createEntryCode = async (req, res) => {\r\n    try {\r\n        const { candidateIds, deadline, testName, numberEasy, numberHard, numberMedium, language, templateId } = req.body.dataEntryCode;\r\n        if (!candidateIds || !deadline || !testName || !language || !templateId) {\r\n            throw ('No Data !')\r\n        } else {\r\n            for (const idCandi of candidateIds) {\r\n                let random = async _ => Promise.all([\r\n                    _questionsRamdom(language, 1, numberEasy),\r\n                    _questionsRamdom(language, 2, numberMedium),\r\n                    _questionsRamdom(language, 3, numberHard)\r\n                ])\r\n                let arrQuestion = await random();\r\n                if (arrQuestion[0].length !== numberEasy || arrQuestion[1].length !== numberMedium || arrQuestion[2].length !== numberHard) {\r\n                    if (arrQuestion[0].length !== numberEasy) throw ('Question Easy Not Enough !');\r\n                    if (arrQuestion[1].length !== numberMedium) throw ('Question Medium Not Enough !');\r\n                    if (arrQuestion[2].length !== numberHard) throw ('Question Hard Not Enough !');\r\n                } else {\r\n                    let dataQuestion = [...arrQuestion[0], ...arrQuestion[1], ...arrQuestion[2]];\r\n                    let dataEntryCode = await _createEntryCode(dataQuestion, idCandi, templateId, deadline);\r\n                    let dataCandidate = await _updateCandidate(idCandi, dataEntryCode._id)\r\n                    let payload = {\r\n                        TO: dataCandidate.email,\r\n                        code: dataEntryCode.code\r\n                    }\r\n                    console.log({ payload })\r\n                    // await send(payload, (err, dataMail) => { console.log(dataMail) })\r\n                    res.status(204).end();\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(203).json({\r\n            success: false,\r\n            message: err.message\r\n        })\r\n    }\r\n}\r\n\r\n//createEntryCode\r\nexport const autoCreateEntryCode = async (req, res) => {\r\n    try {\r\n        let { resCandidate, newCandidate } = req.body\r\n        console.log('req', req.body)\r\n        for (let candidate of newCandidate) {\r\n            console.log('candidate', candidate)\r\n            console.log('language', candidate.language)\r\n            let template = await getTemplateDefaultEntry(candidate.language)\r\n            console.log('template', template)\r\n            let { testName, easy, medium, hard, language } = template,\r\n                templateId = template._id;\r\n            let randQuestion = async _ => Promise.all([\r\n                _questionsRamdom(language, 1, easy),\r\n                _questionsRamdom(language, 2, medium),\r\n                _questionsRamdom(language, 3, hard)\r\n            ])\r\n            let arrQuestion = await randQuestion();\r\n            if (arrQuestion[0].length !== easy || arrQuestion[1].length !== medium || arrQuestion[2].length !== hard) {\r\n                // if (arrQuestion[0].length !== numberEasy) throw ('Question Easy Not Enough !');\r\n                // if (arrQuestion[1].length !== numberMedium) throw ('Question Medium Not Enough !');\r\n                // if (arrQuestion[2].length !== numberHard) throw ('Question Hard Not Enough !');\r\n                continue\r\n            }\r\n            let dataQuestion = [...arrQuestion[0], ...arrQuestion[1], ...arrQuestion[2]];\r\n            console.log('arrQuestion', dataQuestion)\r\n            let deadline = new Date()\r\n            deadline.setMonth(deadline.getMonth() + 1)\r\n            let dataEntryCode = await _createEntryCode(dataQuestion, candidate.id, templateId, deadline);\r\n            let dataCandidate = await _updateCandidate(candidate.id, dataEntryCode._id)\r\n            let payload = {\r\n                TO: dataCandidate.email,\r\n                code: dataEntryCode.code\r\n            }\r\n            // await send(payload, (err, dataMail) => { console.log(dataMail) })\r\n        }\r\n        res.status(200).json({\r\n            candidateImported: resCandidate.candidateImported,\r\n            success: resCandidate.success,\r\n            result: resCandidate.result,\r\n            CanidateImportError: resCandidate.CanidateImportError,\r\n            EnglishCreateError: resCandidate.EnglishCreateError,\r\n            CandidateUpdateError: resCandidate.CandidateUpdateError,\r\n        })\r\n    } catch (err) {\r\n        res.status(203).json({\r\n            success: false,\r\n            message: err.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//regenerate code\r\nexport const regenerate = async (req, res) => {\r\n    try {\r\n        let { _id, deadline, language, numberEasy, numberMedium, numberHard } = req.body.dataEntryCode;\r\n        if (!_id || !deadline || !language || !numberEasy || !numberMedium || !numberHard) {\r\n            throw ('No Data');\r\n        } else {\r\n            let questionEasy = await _questionsRamdom(language, 1, numberEasy);\r\n            let questionMedium = await _questionsRamdom(language, 2, numberMedium);\r\n            let questionHard = await _questionsRamdom(language, 3, numberHard);\r\n            if (questionEasy.length !== numberEasy || questionMedium.length !== numberMedium || questionHard.length !== numberHard) {\r\n                throw ('Please Check Again Template !')\r\n            } else {\r\n                let dataQuestion = questionEasy.concat(questionMedium).concat(questionHard);\r\n                let dataEntryCode = await _regenerate(_id, dataQuestion, deadline);\r\n                if (dataEntryCode) {\r\n                    res.status(200).json({\r\n                        success: true,\r\n                        code: dataEntryCode.code\r\n                    })\r\n                } else {\r\n                    throw (`Can't Regenerate`)\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//Check Code used\r\nexport const checkCode = async (req, res) => {\r\n    try {\r\n        let { code, timeNow } = req.body;\r\n        if (!code || !timeNow) {\r\n            throw ('No Data!')\r\n        } else {\r\n            let token;\r\n            let data = await findCode(code);\r\n            if (!data) {\r\n                throw ('Code is not exist!')\r\n            } else if (!data.endTime) {\r\n                if (data.deadline.getTime() - Date.parse(timeNow) <= 0) {\r\n                    throw ('Code expried!!')\r\n                } else {\r\n                    res.status(200).json({\r\n                        success: true,\r\n                        token: generateToken(code),\r\n                        message: \"Code right!\"\r\n                    })\r\n                }\r\n            } else if ((data.endTime.getTime() - Date.parse(timeNow)) > 0) {\r\n                throw ('Code is using!');\r\n            } else {\r\n                throw ('Code was used!')\r\n            };\r\n        }\r\n    } catch (err) {\r\n        res.status(203).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//get data Show to font-end\r\nexport const showData = async (req, res) => {\r\n    try {\r\n        const { code } = req\r\n        //find code on EntryCodeTable\r\n        let data = await findCode(code);\r\n        if (!data) {\r\n            throw ('Not Found!')\r\n        } else {\r\n            if (data.templateId) {\r\n                res.status(200).json({\r\n                    name: `${data.candidateId.firstName} ${data.candidateId.lastName}`,\r\n                    mobile: data.candidateId.mobile,\r\n                    question: data.questionIds.length,\r\n                    duration: data.templateId.duration,\r\n                    passScore: data.templateId.passScore,\r\n                    language: data.templateId.language\r\n                })\r\n            } else if (data.englishExamId) {\r\n                res.status(200).json({\r\n                    name: `${data.candidateId.firstName} ${data.candidateId.lastName}`,\r\n                    mobile: data.candidateId.mobile,\r\n                    question: data.englishExamId.questions.length,\r\n                    duration: data.englishExamId.duration,\r\n                    passScore: data.englishExamId.passScore,\r\n                    language: data.englishExamId.language\r\n                })\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.send(500).send(err)\r\n    }\r\n}\r\n// api endTest use when user click submit\r\nexport const endTest = async (req, res) => {\r\n    //duration: time test,\r\n    const { duration, list_answer } = req.body;\r\n    const { code } = req\r\n    // create point and save answers to database\r\n    endTestModel(duration, list_answer, code, (err, result) => {\r\n        if (err) {\r\n            res.status(500).json({ success: false });\r\n        } else {\r\n            res.status(200).json({ success: true });\r\n        }\r\n\r\n    })\r\n}\r\nexport const finishTest = async (req, res) => {\r\n    const { code } = req\r\n    try {\r\n        let dataCandidate = await findCode(code)\r\n        //get data from database by code\r\n        let account = {\r\n            name: `${dataCandidate.candidateId.firstName} ${dataCandidate.candidateId.lastName}`,\r\n            mobile: dataCandidate.candidateId.mobile,\r\n            language: dataCandidate.templateId ? dataCandidate.templateId.language : dataCandidate.englishExamId.language\r\n        }\r\n        finishTestModel(code, (err, result) => {\r\n            if (err) {\r\n                res.status(500).json({ success: false });\r\n            } else {\r\n                res.status(200).json({ success: true, data: result, account });\r\n            }\r\n        })\r\n    } catch (err) {\r\n        res.status(401).json({\r\n            success: false,\r\n            message: \"Not Found\"\r\n        })\r\n    }\r\n}\r\n// api startTest when click button start \r\nexport const startTest = async (req, res) => {\r\n    try {\r\n        const { time } = req.body;\r\n        const { code } = req;\r\n        let duration;\r\n        if (!time || !code) {\r\n            throw ('No Data')\r\n        } else {\r\n            let data = await findCode(code);\r\n            if (!data) {\r\n                throw ('Not Found!')\r\n            } else {\r\n                let { startTime, endTime } = data;\r\n                if (data.templateId) {\r\n                    duration = data.templateId.duration;\r\n                } else {\r\n                    duration = data.englishExamId.duration;\r\n                }\r\n                if (!endTime || !startTime || endTime.getTime() - startTime.getTime() < (duration * 1000)) {\r\n                    startTime = new Date();\r\n                    endTime = moment(startTime).add(duration, 'm').toDate()\r\n                    let dataUpdate = await updateEntryCode({ conditions: { code }, update: { startTime, endTime, point: '0', result: 'FAIL' } });\r\n                    res.status(200).send(endTime);\r\n                } else if (endTime.getTime() > Date.parse(time)) {\r\n                    res.status(200).send(endTime);\r\n                } else {\r\n                    throw ('Time OUT');\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err)\r\n    }\r\n}\r\n//send database to font-end\r\nexport const listQuestion = async (req, res) => {\r\n    try {\r\n        const { time } = req.body;\r\n        let { code } = req;\r\n        if (!time || !code) {\r\n            throw ('Not Found')\r\n        } else {\r\n            let dataEntry = await findCode(code);\r\n            let account = {\r\n                name: `${dataEntry.candidateId.firstName} ${dataEntry.candidateId.lastName}`,\r\n                mobile: dataEntry.candidateId.mobile,\r\n            }\r\n            if (dataEntry.templateId) {\r\n                const { questionIds } = dataEntry;\r\n                const listQuestions = questionIds.map(q => {\r\n                    return {\r\n                        id: q.id,\r\n                        title: q.question,\r\n                        multi: q.multi,\r\n                        options: q.options\r\n                    }\r\n                })\r\n                res.status(200).json({\r\n                    time: dataEntry.endTime,\r\n                    currentTime: Date.parse(dataEntry.endTime) - Date.parse(new Date()),\r\n                    listQuestions,\r\n                    account,\r\n                    language: dataEntry.templateId.language,\r\n                    question: dataEntry.questionIds.length,\r\n                    duration: dataEntry.templateId.duration * 60 * 1000\r\n                });\r\n            } else if (dataEntry.englishExamId) {\r\n                const { questions } = dataEntry.englishExamId;\r\n                const listQuestions = questions.map(q => {\r\n                    return {\r\n                        id: q._id,\r\n                        title: q.questions,\r\n                        multi: false,\r\n                        options: q.options,\r\n                        essay: q.essay,\r\n                        partNumber: q.partNumber\r\n                    }\r\n                })\r\n                res.status(200).json({\r\n                    time: dataEntry.endTime,\r\n                    currentTime: Date.parse(dataEntry.endTime) - Date.parse(new Date()),\r\n                    urlImg1: dataEntry.englishExamId.urlImg1,\r\n                    urlImg2: dataEntry.englishExamId.urlImg2,\r\n                    listQuestions,\r\n                    account,\r\n                    language: dataEntry.englishExamId.language,\r\n                    question: dataEntry.englishExamId.questions.length,\r\n                    duration: dataEntry.englishExamId.duration * 60 * 1000\r\n                });\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(404).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n// report => testDetail\r\nexport const reportTestDetail = async (req, res) => {\r\n    const { code } = req.params;\r\n    try {\r\n        const data = await detailResultTest(code, (data, err) => {\r\n            if (err) {\r\n                res.json({\r\n                    success: false,\r\n                })\r\n            } else {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    data\r\n                })\r\n            }\r\n        });\r\n    } catch (err) {\r\n        res.status(500).json({\r\n            success: false,\r\n            message: \"Server Error\"\r\n        })\r\n    }\r\n}\r\n\r\nexport const endEnglishTest = (req, res) => {\r\n    const { duration, list_answer } = req.body;\r\n    const { code } = req;\r\n    endEnglishTestModel(duration, list_answer, code, (err, result) => {\r\n        if (err) {\r\n            res.status(404).json({ success: false });\r\n        } else {\r\n            res.status(200).json({ success: true });\r\n        }\r\n    })\r\n}\r\n\r\nexport const getAllEnglishTest = (req, res) => {\r\n    getAllEnglishTestModel((err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false\r\n            })\r\n        }\r\n        res.json({\r\n            success: true,\r\n            englishEntries: data\r\n        })\r\n    })\r\n}\r\nexport const countEnglishNotPoint = (req, res) => {\r\n    countEnglishNotPointModel((err, count) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false\r\n            })\r\n        }\r\n        res.json({\r\n            success: true,\r\n            count\r\n        })\r\n    })\r\n}\r\n\r\nexport const getQuestionEssayEnglishTest = (req, res) => {\r\n    const { id } = req.params;\r\n    getQuestionEssayEnglishTestModel(id, (err, question_essay) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                err\r\n            })\r\n        }\r\n        res.json({\r\n            success: true,\r\n            question_essay\r\n        })\r\n    })\r\n}\r\n\r\nexport const savePointEssayToDb = (req, res) => {\r\n    const { idExam, point } = req.body;\r\n    console.log(point)\r\n    savePointEssayToDbModel(idExam, point, (err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                err\r\n            })\r\n        }\r\n        res.json({\r\n            success: true,\r\n            data\r\n        })\r\n    })\r\n}\r\n"]}