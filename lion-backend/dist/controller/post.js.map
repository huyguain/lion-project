{"version":3,"sources":["../../src/controller/post.js"],"names":["create","req","res","files","filename","body","urlImage","urlImageSlider","filter","item","fieldname","map","link_url","title","trim","toLowerCase","err","data","code","index","Math","round","random","status","json","success","massage","list","limit","listOrder","order","search","value","console","log","remove","id","params","link","fs","unlinkSync","edit","imageURL","length","undefined","postEdit","getById","send","getPostActive"],"mappings":"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","file":"post.js","sourcesContent":["import {\r\n    createPost, listPost, deletePost,\r\n    editPost, getPostById, getAllPostActive, searchSuggest\r\n} from '../models/post';\r\nimport fs from \"fs\";\r\nimport slug from 'slug';\r\n\r\nexport const create = async (req, res) => {\r\n    req.body.urlImage = await req.files[0].filename;\r\n    req.body.urlImageSlider = req.files.filter(item => item.fieldname === 'slider')\r\n        .map(item => item.filename);\r\n    req.body.link_url = req.body.link_url ? req.body.link_url : slug(req.body.title.trim().toLowerCase());\r\n    createPost(req.body, (err, data) => {\r\n        if (err) {\r\n            if (err.code = 11000) {\r\n                req.body.link_url = slug(req.body.title.trim().toLowerCase())\r\n                    + \"-\" + (err.index + Math.round(Math.random() * 100))\r\n                create(req, res);\r\n            }\r\n            else {\r\n                res.status(500).json({\r\n                    success: false,\r\n                    massage: \"error upload image\"\r\n                })\r\n            }\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n                massage: \"upload image success\"\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const list = (req, res) => {\r\n    const { limit } = req.body;\r\n    listPost({}, limit, (err, data) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false,\r\n                err\r\n            })\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const listOrder = (req, res) => {\r\n    const { order, limit } = req.body;\r\n    listPost(order, limit, (err, data) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false,\r\n                err\r\n            })\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const search = (req, res) => {\r\n    const { order, limit } = req.body;\r\n    try {\r\n        searchSuggest(order.value, (err, data) => {\r\n            console.log(err)\r\n            if (err) {\r\n                res.status(500).json({\r\n                    success: false,\r\n                    err\r\n                })\r\n            } else {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    data\r\n                })\r\n            }\r\n        })\r\n    } catch (err) {\r\n        res.json({\r\n            success: false\r\n        })\r\n    }\r\n}\r\nexport const remove = (req, res) => {\r\n    const { id } = req.params;\r\n    deletePost(id, (err, data) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false\r\n            })\r\n        } else {\r\n            try {\r\n                const link = `upload/${data.urlImage}`;\r\n                console.log(\"link\", link);\r\n                fs.unlinkSync(link);\r\n\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n            res.status(200).json({\r\n                success: true,\r\n                id\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const edit = (req, res) => {\r\n    const { id } = req.params;\r\n    const imageURL = req.files.filter(item => item.fieldname === 'image');\r\n    req.body.urlImage = imageURL.length === 1 ? imageURL[0].filename : undefined;\r\n    req.body.urlImageSlider = req.files.filter(item => item.fieldname === 'slider')\r\n        .map(item => item.filename);\r\n    const data = req.body;\r\n    editPost(id, data, (err, postEdit) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false\r\n            })\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const getById = (req, res) => {\r\n    const { id } = req.params;\r\n    getPostById(id, (err, data) => {\r\n        if (err) {\r\n            res.status(500).send(err);\r\n        } else {\r\n            res.status(200).json({\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const getPostActive = (req, res) => {\r\n    getAllPostActive(4, (err, data) => {\r\n        if (err) {\r\n            res.status(500).send(err);\r\n        } else {\r\n            res.status(200).json({\r\n                data\r\n            })\r\n        }\r\n    })\r\n}"]}