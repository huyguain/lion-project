{"version":3,"sources":["../../src/controller/testTemplate.js"],"names":["createTemplate","req","res","dataTemplate","body","dataTem","status","end","json","success","message","getAllTemplate","deleteTemplate","templateId","params","id","_id","deleteVisible","dataUpdate","length","console","log"],"mappings":";;;;;;;AAAA;;AAMA;;;;AAEA;AACO,IAAMA;AAAA,uEAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,oCAFc,GAEGF,IAAIG,IAFP,CAEdD,YAFc;;AAAA,4BAGjBA,YAHiB;AAAA;AAAA;AAAA;;AAAA,8BAIX,SAJW;;AAAA;AAAA;AAAA,+BAME,sCAAmBA,YAAnB,CANF;;AAAA;AAMdE,+BANc;;AAAA,6BAOdA,OAPc;AAAA;AAAA;AAAA;;AAQdH,4BAAII,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AARc;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AActBL,4BAAII,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBC;AAFiB,yBAArB;;AAdsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAoBP;AACO,IAAMC;AAAA,wEAAiB,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEG,oCAFH;;AAAA;AAElBC,oCAFkB;;AAAA,6BAGlBA,YAHkB;AAAA;AAAA;AAAA;;AAIlBD,4BAAII,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACjBC,qCAAS,IADQ;AAEjBN;AAFiB,yBAArB;AAJkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYtBD,4BAAII,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACjBC,qCAAS,KADQ;AAEjBC;AAFiB,yBAArB;;AAZsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAkBP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACO,IAAME;AAAA,wEAAiB,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBW,kCAFgB,GAEHZ,IAAIa,MAAJ,CAAWC,EAFR;;AAAA,4BAGjBF,UAHiB;AAAA;AAAA;AAAA;;AAAA,8BAIX,WAJW;;AAAA;AAAA;AAAA,+BAMO,sCAAmB,EAAEG,KAAKH,UAAP,EAAnB,EAAwC,EAAEI,eAAe,IAAjB,EAAxC,CANP;;AAAA;AAMZC,kCANY;;AAAA,8BAOdA,WAAWC,MAAX,KAAsB,CAPR;AAAA;AAAA;AAAA;;AAQdjB,4BAAII,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AARc;AAAA;;AAAA;AAAA,8BASL,yBATK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYtBa,gCAAQC,GAAR;AAZsB,0DAafnB,IAAII,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACxBC,qCAAS,KADe;AAExBC;AAFwB,yBAArB,CAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"testTemplate.js","sourcesContent":["import {\r\n    createTestTemplate,\r\n    updateTestTemplate,\r\n    _getAllTemplate,\r\n    _deleteTemplateById,\r\n} from '../models/testTemplate';\r\nimport { getGenByTemplateId, _updateGenByTemplateId, _deleteEntryByTemplate, _getAllEntryByTemplate } from '../models/entryCode';\r\n\r\n//create Template and save to database\r\nexport const createTemplate = async (req, res) => {\r\n    try {\r\n        const { dataTemplate } = req.body;\r\n        if (!dataTemplate) {\r\n            throw ('No Data')\r\n        } else {\r\n            let dataTem = await createTestTemplate(dataTemplate);\r\n            if (dataTem) {\r\n                res.status(204).end()\r\n            } else {\r\n                throw (`Can't Create Template!`)\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(203).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//get all template and send data to front-end\r\nexport const getAllTemplate = async (req, res) => {\r\n    try {\r\n        let dataTemplate = await _getAllTemplate();\r\n        if (dataTemplate) {\r\n            res.status(200).json({\r\n                success: true,\r\n                dataTemplate\r\n            })\r\n        } else {\r\n            throw (`Can't Get Template!`)\r\n        }\r\n    } catch (err) {\r\n        res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n//delete a template by id\r\n/* export const deleteTemplate = async (req, res) => {\r\n    try {\r\n        const templateId = req.params.id;\r\n        if (!templateId) {\r\n            throw ('No Data !')\r\n        } else {\r\n            let dataEntryCode = await _getAllEntryByTemplate(templateId);\r\n            if (dataEntryCode.length === 0) {\r\n                let checkTemplate = await _deleteTemplateById(templateId);\r\n                if (checkTemplate) {\r\n                    res.status(204).end()\r\n                } else {\r\n                    throw ('Delete Template Error !')\r\n                }\r\n            } else {\r\n                let checkEntry = await _deleteEntryByTemplate(templateId);\r\n                if (!checkEntry) {\r\n                    throw ('Delete Entry Do Not Used Error !')\r\n                } else {\r\n                    await _updateGenByTemplateId(templateId);\r\n                    let checkTemplate = await _deleteTemplateById(templateId);\r\n                    if (checkTemplate) {\r\n                        return res.status(204).end()\r\n                    } else {\r\n                        throw ('Delete Template Error !')\r\n                    }\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n*/\r\n//DELETE \r\nexport const deleteTemplate = async (req, res) => {\r\n    try {\r\n        const templateId = req.params.id;\r\n        if (!templateId) {\r\n            throw ('No Data !')\r\n        } else {\r\n            const dataUpdate = await updateTestTemplate({ _id: templateId }, { deleteVisible: true });\r\n            if (dataUpdate.length !== 0) {\r\n                res.status(204).end()\r\n            }else throw ('Delete Template Error !')\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(403).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}"]}