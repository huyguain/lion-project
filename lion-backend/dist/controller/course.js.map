{"version":3,"sources":["../../src/controller/course.js"],"names":["youtube1","req","res","console","log","youtube","feeds","videos","q","err","data","status","end","list","limit","json","success","create","sections","JSON","parse","body","files","filename","urlIcon","urlImage","massage","getById","id","params","_data","send","getCourse","edit","length","fieldname","editCourse","remove","link","fs","unlinkSync","search","value","dataCourse","dataLearning","item","_id","index","learningPath","undefined","push","courseName","updateResultVideo","userId","idLecture","idCourse","result","data_CourseUser","data_out","_dataCourse","message"],"mappings":"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","file":"course.js","sourcesContent":["import {\r\n    createCourse,\r\n    listCourse,\r\n    editCourse,\r\n    getCourseById,\r\n    deleteCourse,\r\n    searchSuggest,\r\n} from '../models/course';\r\nimport {\r\n    listLearning\r\n} from '../models/LearningPath';\r\nimport youtube from 'youtube-feeds'\r\nimport fs from 'fs';\r\nimport {\r\n    getCourseUserById,\r\n    importcourseUserModel,\r\n    getCourseUserByUserName,\r\n    updateCourseUser\r\n} from '../models/courseUser'\r\nexport const youtube1 = async (req, res) => {\r\n    console.log('huy')\r\n    await youtube.feeds.videos({ q: 'EWLF_1M5LYM' }, (err, data) => {\r\n        if (err) console.log(err)\r\n        console.log('data', data)\r\n    })\r\n    console.log('thom')\r\n    res.status(200).end('ok')\r\n}\r\nexport const list = (req, res) => {\r\n    const limit = \"\";\r\n    listCourse(limit, (err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false\r\n            })\r\n        } else {\r\n            res.json({\r\n                success: true,\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const create = async (req, res) => {\r\n    try {\r\n        const sections = JSON.parse(req.body.sections);\r\n        req.body.sections = sections;\r\n        req.body.urlIcon = await req.files[0].filename;\r\n        req.body.urlImage = await req.files[1].filename;\r\n        createCourse(req.body, (err, data) => {\r\n            if (err) {\r\n                console.log(\"err\", err)\r\n                res.json({\r\n                    success: false,\r\n                    massage: \"error\"\r\n                })\r\n            } else {\r\n                res.json({\r\n                    success: true,\r\n                    massage: \"success\"\r\n                })\r\n            }\r\n        })\r\n    } catch (err) {\r\n        res.json({\r\n            success: true,\r\n            massage: \"fail\"\r\n        })\r\n    }\r\n}\r\nexport const getById = async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        let _data = await getCourseUserById(id)\r\n        if (_data) {\r\n            res.status(200).json({\r\n                data: _data\r\n            })\r\n        } else {\r\n            await getCourseById(id, (err, data) => {\r\n                if (err) {\r\n                    throw err\r\n                } else {\r\n                    res.status(200).json({\r\n                        data\r\n                    })\r\n                };\r\n\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err)\r\n    }\r\n}\r\nexport const getCourse = (req, res) => {\r\n    let { id } = req.params;\r\n    getCourseById(id, (err, data) => {\r\n        if (err) {\r\n            res.status(500).send();\r\n        } else {\r\n            res.status(200).json({\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const edit = async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n        const sections = JSON.parse(req.body.sections);\r\n        console.log(sections)\r\n        req.body.sections = sections;\r\n        if (req.files.length !== 0) {\r\n            if (req.files[0] && req.files[1]) {\r\n                req.body.urlIcon = await req.files[0].filename;\r\n                req.body.urlImage = await req.files[1].filename;\r\n            } else {\r\n                if (req.files[0].fieldname === 'imagePreview') {\r\n                    req.body.urlImage = await req.files[0].filename;\r\n                } else {\r\n                    req.body.urlIcon = await req.files[0].filename;\r\n                }\r\n            }\r\n        }\r\n        const data = req.body;\r\n        editCourse(id, data, (err, editCourse) => {\r\n            if (err) {\r\n                console.log(err)\r\n                res.json({\r\n                    success: false\r\n                })\r\n            } else {\r\n                res.json({\r\n                    success: true\r\n                })\r\n            }\r\n        })\r\n    } catch (err) {\r\n        res.json({\r\n            success: false,\r\n            massage: \"fail\"\r\n        })\r\n    }\r\n}\r\nexport const remove = (req, res) => {\r\n    const { id } = req.params;\r\n    deleteCourse(id, (err, data) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false\r\n            })\r\n        } else {\r\n            try {\r\n                const link = `upload/${data.urlImage}`;\r\n                fs.unlinkSync(link);\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n            res.status(200).json({\r\n                success: true,\r\n                id\r\n            })\r\n        }\r\n    })\r\n}\r\nexport const search = async (req, res) => {\r\n    const { value } = req.params;\r\n    let dataCourse = [], dataLearning = [];\r\n    try {\r\n        await searchSuggest(value, async (err, data) => {\r\n            dataCourse = data;\r\n        })\r\n        for (let item of dataCourse) {\r\n            await listLearning(item._id, (err, data) => {\r\n                if (!err && data.length != 0) {\r\n                    let index = 0;\r\n                    while (index < data.length && data[index].learningPath === undefined) index++;\r\n                    if (index < data.length)\r\n                        dataLearning.push({\r\n                            learningPath: data[index].learningPath,\r\n                            courseName: item.courseName,\r\n                            _id: item._id\r\n                        })\r\n                }\r\n            })\r\n        }\r\n        res.json({\r\n            success: true,\r\n            data: dataLearning\r\n        })\r\n    } catch (err) {\r\n        res.json({\r\n            success: false\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const updateResultVideo = async (req, res) => {\r\n    let { userId, idLecture, idCourse, result } = req.body.data;\r\n    try {\r\n        let data_CourseUser = await getCourseUserByUserName(userId, idCourse);\r\n        if (data_CourseUser) {\r\n            await updateCourseUser(data_CourseUser, userId, idCourse, idLecture, result)\r\n        } else {\r\n            let data_out;\r\n            let _dataCourse;\r\n            await getCourseById(idCourse, (err, dataCourse) => {\r\n                _dataCourse = dataCourse\r\n            })\r\n            await importcourseUserModel(userId, _dataCourse, idLecture)\r\n        }\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Upload data success!'\r\n        })\r\n    } catch (err) {\r\n        res.status(500).send('Upload data Error!')\r\n    }\r\n}\r\n"]}