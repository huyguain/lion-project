{"version":3,"sources":["../../src/controller/question.js"],"names":["exportQuestionFromDB","req","res","err","data","status","send","uploadEnglishExam","questions","fileName","body","uidEnglish","testCode","fromFile","on","jsonObj","push","error","urlImage1","files","filename","urlImage2","result","fs","unlink","end","uploadFile","console","log","fileNameStore","_err","_data","json","success","message","getQuestionById","id","params","addQuestion","editQuestion","deleteQuestion","getQuiz","idCourse","idSection","idLecture","limit","infoQuiz","numberQuestion","language","courseName","sectionName"],"mappings":"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","file":"question.js","sourcesContent":["import {\r\n    importToDb,\r\n    getAllQuestion,\r\n    getQuestionBy_Id,\r\n    add_question,\r\n    edit_question,\r\n    delete_question,\r\n    getQuizModel\r\n} from '../models/question';\r\nimport { getInfoQuestionQuiz } from '../models/course';\r\nimport { createEnglishTest } from '../models/englishExam'\r\nimport { importQues, readFileCsv } from '../lib/excelUtil';\r\nimport fs from 'fs';\r\nimport { create } from 'domain';\r\nimport csv from 'csvtojson';\r\n\r\nexport const exportQuestionFromDB = (req, res) => {\r\n    getAllQuestion((err, data) => {\r\n        if (err) res.status(400).send('Bad Request');\r\n        else res.status(200).send(data)\r\n    })\r\n}\r\n//upload data to server and save  to Database\r\nexport const uploadEnglishExam = async (req, res) => {\r\n    let questions = []\r\n    try {\r\n        const fileName = `upload/${req.body.uidEnglish}-${req.body.testCode}-${req.body.data}`\r\n        csv()\r\n            .fromFile(fileName)\r\n            .on('json', (jsonObj) => {\r\n                questions.push(jsonObj)\r\n            })\r\n            .on('done', (error) => {\r\n                let { testCode } = req.body\r\n                let urlImage1 = `${req.files[0].filename}`\r\n                let urlImage2 = `${req.files[1].filename}`\r\n                createEnglishTest(testCode, urlImage1, urlImage2, questions, (err, result) => {\r\n                    if (err) throw err\r\n                })\r\n                fs.unlink(fileName, err => { })\r\n            })\r\n        await res.end()\r\n    } catch (err) {\r\n        res.status(500).send('Upload Error!')\r\n    }\r\n}\r\nexport const uploadFile = async (req, res) => {\r\n    try {\r\n        console.log('den-roi', req.body.data, req.body.fileNameStore)\r\n        let fileName = `upload/${req.body.fileNameStore}`\r\n        console.log('fileName', fileName)\r\n        await readFileCsv(fileName, async (err, data) => {\r\n            if (err) throw err;\r\n            try {\r\n                await importToDb(data, async (_err, _data) => {\r\n                    if (_err) throw _err\r\n                })\r\n                await fs.unlink(fileName, err => { })\r\n                await res.end()\r\n            } catch (err) {\r\n                res.status(201).json({\r\n                    success: false,\r\n                    message: \"Format File Error!\"\r\n                })\r\n            }\r\n        })\r\n    } catch (err) {\r\n        console.log('err', err)\r\n        res.status(500).send('Upload Error!')\r\n    }\r\n}\r\nexport const getQuestionById = async (req, res) => {\r\n    try {\r\n        let { id } = req.params\r\n        await getQuestionBy_Id(id, (err, data) => {\r\n            res.status(200).send(data)\r\n        })\r\n    } catch (err) {\r\n        res.status(500).send('Error!')\r\n    }\r\n}\r\n\r\nexport const addQuestion = async (req, res) => {\r\n    try {\r\n        await add_question(req.body, (err, data) => {\r\n            res.status(200).send('Create question success')\r\n        })\r\n    } catch (err) {\r\n        res.status(500).send('Create question error!')\r\n    }\r\n}\r\nexport const editQuestion = async (req, res) => {\r\n    try {\r\n        let { id } = req.params;\r\n        await edit_question(id, req.body, (err, data) => {\r\n            res.status(200).send('Edit success!')\r\n        })\r\n    } catch (err) {\r\n        res.status(500).send('Edit Error!')\r\n    }\r\n}\r\nexport const deleteQuestion = async (req, res) => {\r\n    try {\r\n        let { id } = req.params\r\n        await delete_question(id, (err, data) => {\r\n            res.status(200).send('Delete success!')\r\n        })\r\n    } catch (err) {\r\n        res.status(500).send('Delete Error!')\r\n    }\r\n}\r\nexport const getQuiz = async (req, res) => {\r\n\r\n    const { idCourse, idSection, idLecture } = req.params;\r\n    getInfoQuestionQuiz(idCourse, idSection, idLecture, (err, data) => {\r\n        if (err) {\r\n            res.status(500).json({\r\n                success: false\r\n            })\r\n        } else {\r\n            const limit = data.infoQuiz.numberQuestion;\r\n            getQuizModel(data.language, data.courseName, data.sectionName, limit ,  (err, questions) => {\r\n                if (err) {\r\n                    res.json({\r\n                        success: false\r\n                    })\r\n                } else {\r\n                    res.json({\r\n                        success: true,\r\n                        data: {\r\n                            questions,\r\n                            infoQuiz: data.infoQuiz,\r\n                            sectionName: data.sectionName\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    })\r\n}"]}