{"version":3,"sources":["../../src/controller/learningPath.js"],"names":["create","req","res","body","language","learningPath","courseIds","title","content","err","data","json","success","message","listMyCourse","id","params","dataLearning","dataCourse","dataSet","Set","dataAll","i","courseId","push","_id","_data","j","obj","idCourse","map","v","add","dataLearningPath","dataIdCourse","name","list","getById","status","edit","remove","getLearningPathName","length","getLearningPath"],"mappings":"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","file":"learningPath.js","sourcesContent":["import {\r\n    createLearningPath, listLearningPath, getLearningById,\r\n    editLearningById, removeLearning, listLearning,\r\n    _getLearningPathName, _getLearningPath\r\n} from '../models/LearningPath';\r\nimport { _getAllCourse } from '../models/course'\r\nimport { listCourse } from '../models/courseUser';\r\n\r\n\r\nexport const create = async (req, res) => {\r\n    let { language, learningPath, courseIds, title, content } = req.body\r\n    createLearningPath(language, learningPath, courseIds, title, content, (err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                message: \"error\"\r\n            })\r\n        } else {\r\n            res.json({\r\n                success: true,\r\n                message: \"success\"\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const listMyCourse = async (req, res) => {\r\n    try {\r\n        let { id } = req.params;\r\n        let dataLearning = [];\r\n        let dataCourse = [];\r\n        let dataSet = new Set();\r\n        let dataAll = await listCourse(id);\r\n        if (dataAll === []) {\r\n            throw ('No Data!')\r\n        } else {\r\n            for (let i of dataAll) {\r\n                if (i.courseId) {\r\n                    dataCourse.push(i.courseId)\r\n                    let _data = await listLearning(i.courseId._id._id);\r\n                    for (let j of _data) {\r\n                        let obj = {\r\n                            learningPath: j.learningPath,\r\n                            idCourse: i.courseId._id._id\r\n                        }\r\n                        dataLearning.push(obj)\r\n                    }\r\n                }\r\n            }\r\n            dataLearning.map((v, i) => {\r\n                dataSet.add(v.learningPath)\r\n            })\r\n            let dataLearningPath = []\r\n            for (const i of dataSet) {\r\n                let dataIdCourse = [];\r\n                dataLearning.map(v => {\r\n                    if (i === v.learningPath) {\r\n                        dataIdCourse.push(v.idCourse);\r\n                    }\r\n                })\r\n                let obj = {\r\n                    name: i,\r\n                    data: dataIdCourse\r\n                }\r\n                dataLearningPath.push(obj)\r\n            }\r\n            res.json({\r\n                success: true,\r\n                message: \"success\",\r\n                dataCourse,\r\n                dataLearningPath\r\n            })\r\n        };\r\n\r\n    } catch (err) {\r\n        res.json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const list = async (req, res) => {\r\n    listLearningPath((err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                message: \"error\"\r\n            })\r\n        } else {\r\n            res.json({\r\n                success: true,\r\n                message: \"success\",\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const getById = (req, res) => {\r\n    const { id } = req.params\r\n    getLearningById(id, (err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                message: 'error'\r\n            })\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n                message: 'success',\r\n                data\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const edit = (req, res) => {\r\n    const { id } = req.params\r\n    const { language, learningPath, courseIds, title, content } = req.body\r\n    editLearningById(id, language, learningPath, courseIds, title, content, (err, data) => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                message: 'error'\r\n            })\r\n        } else {\r\n            res.json({\r\n                success: true,\r\n                message: 'success'\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const remove = (req, res) => {\r\n    const { id } = req.params\r\n    removeLearning(id, err => {\r\n        if (err) {\r\n            res.json({\r\n                success: false,\r\n                message: 'error'\r\n            })\r\n        } else {\r\n            res.json({\r\n                success: true,\r\n                message: 'success'\r\n            })\r\n        }\r\n    })\r\n}\r\n//getLearningPathName\r\nexport const getLearningPathName = async (req, res) => {\r\n    try {\r\n        let dataLearning = await _getLearningPathName();\r\n        if (dataLearning.length === 0) {\r\n            throw ('Learning Path Does Not Existed !')\r\n        } else {\r\n            res.status(200).json({\r\n                success: true,\r\n                dataLearning,\r\n            })\r\n        }\r\n    } catch (error) {\r\n        res.status(203).json({\r\n            success: false,\r\n            message: error\r\n        })\r\n    }\r\n}\r\n//getLearningPath\r\nexport const getLearningPath = async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        if (!id) {\r\n            throw ('No Data')\r\n        } else {\r\n            let dataLearning = await _getLearningPath(id);\r\n            if (!dataLearning) {\r\n                throw (`Can't Not Get Learning !`)\r\n            } else {\r\n                let dataCourse = await _getAllCourse();\r\n                res.status(200).json({\r\n                    success: true,\r\n                    dataLearning,\r\n                    dataCourse\r\n                })\r\n            }\r\n        }\r\n    } catch (err) {\r\n        res.status(203).json({\r\n            success: false,\r\n            message: err\r\n        })\r\n    }\r\n}"]}