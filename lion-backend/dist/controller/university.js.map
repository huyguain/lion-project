{"version":3,"sources":["../../src/controller/university.js"],"names":["create","req","res","body","err","data","json","success","message","importFile","university","fileName","fileUniversity","fromFile","on","jsonObj","push","error","result","fs","unlink","end","status","send","list","getOne","id","params","edit","remove"],"mappings":"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","file":"university.js","sourcesContent":["import { createUniversity, listUniversity, getOneUniversity, editUniversity, \n        removeUniversity, importUniversity } from '../models/university'\nimport csv from 'csvtojson';\nimport fs from 'fs'\n\nexport const create = (req, res) => {\n    createUniversity(req.body, (err, data) => {\n        if (err) {\n            res.json({\n                success: false,\n                message: err\n            })\n        } else {\n            res.json({\n                success: true,\n                message: 'success'\n            })\n        }\n    })\n}\n\nexport const importFile = async (req, res) => {\n    let university = []\n    try {\n        const fileName = `upload/${req.body.fileUniversity}`\n        csv()\n            .fromFile(fileName)\n            .on('json', (jsonObj) => {\n                university.push(jsonObj)\n            })\n            .on('done', (error) => {\n                importUniversity(university, (err, result) => {\n                    if (err) throw err\n                })\n                fs.unlink(fileName, err => { })\n            })\n        await res.end()\n    } catch (err) {\n        res.status(500).send('Upload Error!')\n    }\n}\n\nexport const list = (req, res) => {\n    listUniversity((err, data) => {\n        if (err) {\n            res.json({\n                success: false,\n                message: err\n            })\n        } else {\n            res.json({\n                success: true,\n                message: 'success',\n                data\n            })\n        }\n    })\n}\n\nexport const getOne = (req, res) => {\n    const { id } = req.params\n    getOneUniversity(id, (err, data) => {\n        if (err) {\n            res.json({\n                success: false,\n                message: err\n            })\n        } else {\n            res.json({\n                success: true,\n                message: 'success',\n                data\n            })\n        }\n    })\n}\n\nexport const edit = (req, res) => {\n    const { id } = req.params\n    editUniversity(id, req.body, (err, data) => {\n        if (err) {\n            res.json({\n                success: false,\n                message: err\n            })\n        } else {\n            res.json({\n                success: true,\n                message: 'success',\n                data\n            })\n        }\n    })\n}\n\nexport const remove = (req, res) => {\n    const { id } = req.params\n    removeUniversity(id, err => {\n        if (err) {\n            res.json({\n                success: false,\n                message: err\n            })\n        } else {\n            res.json({\n                success: true,\n                message: 'success'\n            })\n        }\n    })\n}\n\n\n"]}