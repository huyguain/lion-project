{"version":3,"sources":["../../src/models/candidate.js"],"names":["Candidate","Schema","firstName","String","lastName","email","university","note","state","entryCodeIds","type","Types","ObjectId","ref","mobile","Number","candidateTable","mongoose","model","virtual","get","_createCanidate","dataCandidate","_candidateTable","save","err","data","_getCanidateByEmail","findOne","exec","_getAllCandidate","find","populate","path","_getCandidateById","_id","_editCandidate","console","log","findOneAndUpdate","new","_deleteCandidate","remove","_updateCandidate","entryCodeId","$push","_updateCandidatePull","findByIdAndUpdate","$pull"],"mappings":"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","file":"candidate.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\n\nconst Candidate = new Schema({\n    firstName: String,\n    lastName: String,\n    email: String,\n    university: String,\n    note: String,\n    state: String,\n    entryCodeIds: [{\n        type: Schema.Types.ObjectId,\n        ref: 'EntryCode',\n    }],\n    mobile: Number\n})\nconst candidateTable = mongoose.model('Candidate', Candidate);\n\nCandidate.virtual('fullName').get(function () {\n    return this.firstName + ' ' + this.lastName;\n});\n//create candidate\nexport const _createCanidate = (dataCandidate) => {\n    let _candidateTable = new candidateTable(dataCandidate);\n    return _candidateTable.save((err, data) => {\n        if (err) {\n            return err;\n        } else {\n            return data;\n        }\n    })\n}\n//get candidate by Email\nexport const _getCanidateByEmail = (email) => {\n    return candidateTable.findOne({ email })\n        .exec((err, data) => {\n            if (err) {\n                return ('Get Canidate By Email Error!')\n            } else {\n                return data;\n            }\n        })\n}\n//get all candidate\nexport const _getAllCandidate = () => {\n    return candidateTable.find()\n        .populate({\n            path: 'entryCodeIds',\n            populate: { path: 'englishExamId' },\n        })\n        .populate({\n            path: 'entryCodeIds',\n            populate: { path: 'templateId' },\n        })\n        .exec((err, data) => {\n            if (err) {\n                return ('Get Data Candidate Error!')\n            } else {\n                return data;\n            }\n        })\n}\n//get Candidate by Id\nexport const _getCandidateById = (_id) => {\n    return candidateTable.findOne({ _id })\n        .exec((err, data) => {\n            if (err) {\n                return ('Get Canidate Error!')\n            } else {\n                return data\n            }\n        })\n}\n//editCandidate \nexport const _editCandidate = (_id, dataCandidate) => {\n    console.log({ dataCandidate }, dataCandidate.note);\n    return candidateTable.findOneAndUpdate({ _id }, {\n        firstName: dataCandidate.firstName,\n        lastName: dataCandidate.lastName,\n        university: dataCandidate.university,\n        note: dataCandidate.note,\n        mobile: dataCandidate.mobile\n    }, { new: true }).exec((err, data) => {\n        if (err) {\n            console.log('loi roi')\n            return ('Update Candidate Error!')\n        } else {\n            console.log('data', data)\n            return data\n        }\n    })\n}\n//deleteCandidate\nexport const _deleteCandidate = (_id) => {\n    return candidateTable.remove({ _id }, (err) => {\n        if (err) {\n            return ('Delete Candidate Error!')\n        } else {\n            return 1;\n        }\n    })\n}\n//update Entry code id push entry id\nexport const _updateCandidate = (_id, entryCodeId) => {\n    return candidateTable.findOneAndUpdate({ _id },\n        { $push: { \"entryCodeIds\": entryCodeId } },\n        { new: true })\n        .exec((err, data) => {\n            if (err) {\n                throw ('Update Candidate Error !')\n            } else {\n                return data\n            }\n        })\n}\n//update Entry Code delete EntryId\nexport const _updateCandidatePull = (_id, entryCodeId) => {\n    return candidateTable.findByIdAndUpdate({ _id },\n        { $pull: { \"entryCodeIds\": entryCodeId } },\n        { new: true }).exec((err, data) => {\n            if (err) {\n                return ('Update Candidate Error !')\n            } else {\n                return data\n            }\n        })\n}"]}