{"version":3,"sources":["../../src/models/university.js"],"names":["universitySchema","Schema","name","String","location","University","mongoose","model","createUniversity","body","callback","console","log","create","err","data","importUniversity","university","remove","listUniversity","find","sort","_id","then","catch","getOneUniversity","editUniversity","findByIdAndUpdate","new","removeUniversity"],"mappings":"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","file":"university.js","sourcesContent":["import mongoose, { Schema } from 'mongoose'\n// import { LocationTable } from './location'\n\nconst universitySchema = new Schema({\n    name: String,\n    location: String\n})\n\nexport const University = mongoose.model('University', universitySchema);\n\nexport const createUniversity = (body, callback) => {\n    console.log('body', body)\n    const { name, location } = body\n    University.create({\n        name,\n        location\n    }, (err, data) => {\n        if (err) return callback(err)\n        return callback(null, data)\n    })\n}\n\nexport const importUniversity = async (university, callback) => {\n    try {\n        await University.remove()\n        University.create(university, (err, data) => {\n            if (err) return callback(err)\n            return callback(null, data)\n        }) \n    } catch (err) {\n        return callback(err)\n    }\n}\n\nexport const listUniversity = (callback) => {\n    University.find({}).sort({ _id: -1 }).\n        then(\n            data => callback(null, data)\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const getOneUniversity = (_id, callback) => {\n    console.log(_id)\n    University.find({ _id }).\n        then(\n            data => callback(null, data)\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const editUniversity = (_id, body, callback) => {\n    const { name, location } = body\n    University.findByIdAndUpdate(\n        _id,\n        {\n            name, location\n        },\n        { new: true },\n        (err, data) => {\n            if (err) return callback(err)\n            return callback(null, data)\n        }\n    )\n}\n\nexport const removeUniversity = (_id, callback) => {\n    University.remove({ _id }, err => {\n        if (err) return callback(err)\n        return callback(null)\n    })\n}"]}