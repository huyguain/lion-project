{"version":3,"sources":["../../src/models/panel.js"],"names":["panel","Schema","urlImage","String","title","description","linkto","status","type","Boolean","default","create_at","Date","now","update_at","panelModel","mongoose","model","createPanel","newPanel","callback","console","log","Panel","save","data","listPanel","limit","find","sort","deletePanel","id","findOneAndRemove","_id","editPanel","findById","doc","link","fs","unlinkSync","err","getPanelById","deleteMultiplePanel","ids","remove","$in"],"mappings":"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","file":"panel.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport fs from 'fs';\r\n\r\nconst panel = new Schema({\r\n    urlImage: String,\r\n    title: String,\r\n    description: String,\r\n    linkto: String,    \r\n    status: { type: Boolean, default: false },\r\n    create_at: { type: Date, default: Date.now },\r\n    update_at: { type: Date, default: Date.now }\r\n});\r\nlet panelModel = mongoose.model('Panel', panel);\r\nexport const createPanel = async (newPanel, callback) => {\r\n    console.log(newPanel);\r\n    let Panel = new panelModel(newPanel);\r\n    try {\r\n        const data = await Panel.save();\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const listPanel = async (limit = \"\", callback) => {\r\n    try {\r\n        const data = await panelModel.find().sort({ create_at: -1 }).limit(limit);\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const deletePanel = async (id, callback) => {\r\n    try {\r\n        const data = await panelModel.findOneAndRemove({ _id: id });\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const editPanel = async (id, data, callback) => {\r\n    try {\r\n        const doc = await panelModel.findById({ _id: id });\r\n        const { title, description, status, urlImage, linkto } = data;\r\n        doc.title = title;\r\n        doc.description = description;\r\n        doc.status = status;\r\n        doc.linkto = linkto;\r\n        //check have choosed new image\r\n        //=>true=> save new image , unlink old\r\n        if (urlImage) {\r\n            try {\r\n                const link = `upload/${doc.urlImage}`;\r\n                fs.unlinkSync(link);\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n            doc.urlImage = urlImage;\r\n        }\r\n        const panel = await doc.save();\r\n        callback(null, panel);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const getPanelById = async (id, callback) => {\r\n    try {\r\n        const doc = await panelModel.findById({ _id: id });\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const deleteMultiplePanel = async (ids, callback) => {\r\n    try {\r\n        await panelModel.remove({ _id: { $in: ids } })\r\n        callback(null);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}"]}