{"version":3,"sources":["../../src/models/category.js"],"names":["mongoose","Promise","global","categoriesSchema","Schema","title","type","String","required","unique","urlImage","description","categoryModel","model","createCategory","newCategory","callback","Category","save","data","console","log","listCategories","limit","find","getCategoriesId","id","findById","_id","doc","getCategoriesTitle","editCategory","deleteImage","category","deleteCategory","remove","link","fs","unlinkSync","err"],"mappings":"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","file":"category.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nmongoose.Promise = global.Promise;\r\nconst categoriesSchema = new Schema({\r\n    title: {\r\n        type: String,\r\n        required: true,\r\n        unique: true\r\n    },\r\n    urlImage: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    description: {\r\n        type: String\r\n    }\r\n})\r\n\r\nconst categoryModel = mongoose.model('category', categoriesSchema);\r\nexport const createCategory = async (newCategory, callback) => {\r\n    let Category = new categoryModel(newCategory);\r\n    try {\r\n        const data = await Category.save();\r\n        callback(null, data);\r\n    } catch (err) {\r\n        console.log(err);\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const listCategories = async (limit, callback) => {\r\n    try {\r\n        let data = await categoryModel.find();\r\n        if (!limit) data = await categoryModel.find().limit(limit);\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const getCategoriesId = async (id, callback) => {\r\n    try {\r\n        const doc = await categoryModel.findById({ _id: id });\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const getCategoriesTitle = async (title, callback) => {\r\n    try {\r\n        const doc = await categoryModel.find({ title });\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const editCategory = async (id, data, callback) => {\r\n    try {\r\n        let doc = await categoryModel.findById({ _id: id });\r\n        const { title, description, urlImage } = data;\r\n        doc.title = title;\r\n        doc.description = description;\r\n        if (urlImage) {\r\n            deleteImage(doc.urlImage);\r\n            doc.urlImage = urlImage;\r\n        }\r\n        const category = await doc.save();\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const deleteCategory = async (id, callback) => {\r\n    try {\r\n        const data = await categoryModel.remove({ _id: id });\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nconst deleteImage = urlImage => {\r\n    if (urlImage) {\r\n        try {\r\n            const link = `upload/${urlImage}`;\r\n            fs.unlinkSync(link);\r\n        } catch (err) {\r\n        }\r\n    }\r\n}"]}