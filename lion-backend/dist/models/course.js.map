{"version":3,"sources":["../../src/models/course.js"],"names":["Lecture","Schema","type","String","urlVideo","title","duration","Number","numberQuestion","passScore","result","Section","section","lectures","Course","language","courseName","urlIcon","urlImage","totalTime","start_at","Date","deadline","content","sections","CourseModel","mongoose","model","createCourse","newCourse","callback","course","save","data","editCourse","id","findById","_id","doc","link","fs","unlinkSync","err","console","log","getCourseById","listCourse","limit","find","sort","select","_getAllCourse","exec","searchSuggest","valueSearch","deleteCourse","findOneAndRemove","getInfoQuestionQuiz","idCourse","idSection","idLecture","dataCourse","lecture","sectionName","infoQuiz"],"mappings":"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","file":"course.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport fs from 'fs';\r\n\r\nlet Lecture = new Schema({\r\n    type: String,\r\n    urlVideo: String,\r\n    title: String,\r\n    duration: Number,\r\n    numberQuestion: Number,\r\n    passScore: Number,\r\n    result: String\r\n})\r\nlet Section = new Schema({\r\n    section: String,\r\n    lectures: [Lecture]\r\n})\r\nlet Course = new Schema({\r\n    language: String,\r\n    courseName: String,\r\n    urlIcon: String,\r\n    urlImage: String,\r\n    totalTime: Number,\r\n    start_at: Date,\r\n    deadline: Date,\r\n    title: String,\r\n    content: String,\r\n    sections: [Section]\r\n})\r\n\r\nconst CourseModel = mongoose.model('Course', Course);\r\n\r\nexport const createCourse = async (newCourse, callback) => {\r\n    let course = new CourseModel(newCourse);\r\n    try {\r\n        const data = await course.save();\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const editCourse = async (id, editCourse, callback) => {\r\n    try {\r\n        const doc = await CourseModel.findById({ _id: id });\r\n        const { language, courseName, title, content, urlVideo, urlIcon, urlImage, sections } = editCourse;\r\n        doc.urlVideo = urlVideo;\r\n        doc.language = language;\r\n        doc.courseName = courseName;\r\n        doc.title = title;\r\n        doc.content = content;\r\n        doc.sections = sections;\r\n        if (urlImage || urlIcon) {\r\n            if (urlImage) {\r\n                try {\r\n                    const link = `upload/${doc.urlImage}`;\r\n                    fs.unlinkSync(link);\r\n                } catch (err) {\r\n                    console.log(err)\r\n                }\r\n                doc.urlImage = urlImage;\r\n            }\r\n            if (urlIcon) {\r\n                try {\r\n                    const link = `upload/${doc.urlIcon}`;\r\n                    fs.unlinkSync(link);\r\n                } catch (err) {\r\n                    console.log(err)\r\n                }\r\n                doc.urlIcon = urlIcon;\r\n            }\r\n        }\r\n        const course = await doc.save();\r\n        callback(null, course);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const getCourseById = async (id, callback) => {\r\n    try {\r\n        const doc = await CourseModel.findById({ _id: id });\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const listCourse = async (limit = \"\", callback) => {\r\n    try {\r\n        const data = await CourseModel.find({})\r\n            .sort({ start_at: -1 })\r\n            .select({})\r\n            .limit(limit);\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\n//get all course\r\nexport const _getAllCourse = () => {\r\n    return CourseModel.find({}).select({ courseName: 1 }).exec((err, data) => {\r\n        if (err) {\r\n            throw ('Get Course Error !')\r\n        } else {\r\n            return data;\r\n        }\r\n    })\r\n\r\n}\r\nexport const searchSuggest = async (valueSearch, callback) => {\r\n    try {\r\n        const data = await CourseModel\r\n            .find({ courseName: { '$regex': valueSearch } })\r\n            .limit(10);\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const deleteCourse = async (id, callback) => {\r\n    try {\r\n        const data = await CourseModel.findOneAndRemove({ _id: id });\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const getInfoQuestionQuiz = async (idCourse, idSection, idLecture, callback) => {\r\n    try {\r\n        const dataCourse = await CourseModel.findById({ _id: idCourse }).select({ language: 1, courseName: 1, sections: 1 });\r\n        const section = await dataCourse.sections.id(idSection);\r\n        const lecture = await section.lectures.id(idLecture);\r\n        const data = {\r\n            language: dataCourse.language,\r\n            courseName: dataCourse.courseName,\r\n            sectionName: section.section,\r\n            infoQuiz: lecture\r\n        }\r\n        callback(null, data);\r\n    } catch (err) {\r\n        console.log('err', err)\r\n        callback(err);\r\n    }\r\n}\r\n"]}