{"version":3,"sources":["../../src/models/englishExam.js"],"names":["questionSchema","Schema","questions","String","options","a","b","c","d","correct","essay","Boolean","partNumber","Number","englishTestSchema","testCode","urlImg1","urlImg2","language","type","default","duration","passScore","EnglishTest","mongoose","model","createEnglishTest","callback","englishTest","forEach","optionChoice","element","push","question","split","save","err","result","getEnglishTestAsAw","find","message","data","getEnglishTest","_getEnglishTest","sort","_id","limit","exec"],"mappings":"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","file":"englishExam.js","sourcesContent":["import mongoose, { Schema, Error } from 'mongoose';\n\nlet questionSchema = new Schema({\n    questions: String,\n    options: {\n        a: String,\n        b: String,\n        c: String,\n        d: String\n    },\n    correct: [],\n    essay: Boolean,\n    partNumber: Number\n})\n\nlet englishTestSchema = new Schema({\n\n    testCode: String,\n\n    urlImg1: String,\n\n    urlImg2: String,\n    language: { type: String, default: `English` },\n    duration: { type: Number, default: 40 },\n    passScore: { type: Number, default: 80 },\n    questions: [questionSchema]\n})\n\nconst EnglishTest = mongoose.model('EnglishTest', englishTestSchema)\n\n\nexport const createEnglishTest = (testCode, urlImg1, urlImg2, questions, callback) => {\n    let englishTest = new EnglishTest()\n    englishTest.testCode = testCode\n    englishTest.urlImg1 = urlImg1\n    englishTest.urlImg2 = urlImg2\n    questions.forEach(element => {\n        const optionChoice = element['options[d]'] ? \n                                { a: element['options[a]'], b: element['options[b]'], c: element['options[c]'], d: element['options[d]']} :\n                                { a: element['options[a]'], b: element['options[b]'], c: element['options[c]']} \n\n        englishTest.questions.push({\n            questions: element.question,\n            options: optionChoice,\n            correct: element.correct.split(','),\n            essay: (element.essay === 'TRUE' ? true : false),\n            partNumber: element.partNumber\n        })\n    });\n    englishTest.save((err, result) => {\n        if (err) return callback(err)\n        return callback(null, result)\n    })\n}\n\nexport const getEnglishTestAsAw = async () => {\n    try {\n        let result = await EnglishTest.find({})\n        return { message: true, data: result }\n    } catch (error) {\n        return {\n            message: false, data: error\n        }\n    }\n\n}\n\nexport const getEnglishTest = (callback) => {\n    EnglishTest.find({}, (err, data) => {\n        if (err) return callback(err)\n        callback(null, data)\n    })\n}\n//get English Test\nexport const _getEnglishTest = async () => {\n    let result\n    await EnglishTest.find({}).sort({_id: -1}).limit(1).exec((err, data) => {\n        if (err) {\n            result = 'Get English Test Error !'\n        } else {\n            result = data[0]\n        }\n    })\n    return result\n}\n"]}