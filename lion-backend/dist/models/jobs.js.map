{"version":3,"sources":["../../src/models/jobs.js"],"names":["jobsSchema","Schema","title","String","location","type","Types","ObjectId","ref","deadlineSubmit","Date","joinDate","category","salary","Number","offer","hashTag","content","Jobs","mongoose","model","createJob","body","callback","create","err","data","listJob","find","$gt","now","limit","sort","_id","populate","then","catch","listJobCategory","console","log","filter","item","toLowerCase","listJobLocation","zone","trim","listJobHashtag","listJobCategoryLocation","getOneJob","editJob","findByIdAndUpdate","new","removeJob","remove"],"mappings":"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","file":"jobs.js","sourcesContent":["import mongoose, { Schema } from 'mongoose'\nimport slug from 'slug'\n\nlet jobsSchema = new Schema({\n    title: String,\n    location: {\n        type: Schema.Types.ObjectId,\n        ref: 'Location'\n    },\n    deadlineSubmit: Date,                   //Han nop\n    joinDate: Date,                         //ngay khai giang, bat dau lam viec\n    category: {\n        type: Schema.Types.ObjectId,\n        ref: 'category'\n    },                       //fresher, thuc tap, junior\n    salary: Number,\n    offer: [{\n        type: Schema.Types.ObjectId,\n        ref: 'Offer'\n    }],\n    hashTag: [],\n    content: String\n})\n\nconst Jobs = mongoose.model('Jobs', jobsSchema);\n\nexport const createJob = (body, callback) => {\n    const { title, location, deadlineSubmit, joinDate,\n        category, salary, offer, hashTag, content } = body\n    Jobs.create({\n        title,\n        location,\n        deadlineSubmit,\n        joinDate,\n        category,\n        salary,\n        offer,\n        hashTag,\n        content\n    }, (err, data) => {\n        if (err) return callback(err)\n        return callback(null, data)\n    })\n}\n\nexport const listJob = (callback) => {\n    Jobs.find({ deadlineSubmit: { $gt: Date.now() } }).\n        limit(25).\n        sort({ _id: 1 }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n            data => callback(null, data)\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const listJobCategory = (category, callback) => {\n    console.log('date-now', Date.now())\n    Jobs.find({ deadlineSubmit: { $gt: Date.now() } }).\n        limit(25).\n        sort({ deadlineSubmit: -1 }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n        data => {\n            data = data.filter(item => item.category.title.toLowerCase() === category);\n            callback(null, data)\n        }).catch(\n        err => callback(err)\n        )\n}\n\nexport const listJobLocation = (location, callback) => {\n    console.log('date-now', location)\n    Jobs.find({ deadlineSubmit: { $gt: Date.now() } }).\n        limit(25).\n        sort({ deadlineSubmit: -1 }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n        data => {\n            console.log('data-back', data[0].location.zone, location)\n            data = data.filter(item => slug(item.location.zone.toLowerCase().trim()) === location);\n            console.log('data', data)\n            callback(null, data)\n        }).catch(\n        err => callback(err)\n        )\n}\n\nexport const listJobHashtag = (hashTag, callback) => {\n    console.log('date-now', hashTag)\n    Jobs.find({ deadlineSubmit: { $gt: Date.now() }, hashTag }).\n        limit(25).\n        sort({ deadlineSubmit: -1 }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n        data => {\n            // data = data.filter(item => item.category.title.toLowerCase() === category);\n            callback(null, data)\n        }).catch(\n        err => callback(err)\n        )\n}\n\nexport const listJobCategoryLocation = (category, location, callback) => {\n    Jobs.find({ location }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n            data => {\n                data = data.filter(item => item.category.title.toLowerCase() === category);\n                callback(null, data)\n            }\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const getOneJob = (_id, callback) => {\n    Jobs.find({ _id }).\n        populate(\"location\").\n        populate(\"offer\").\n        populate('category').\n        then(\n        data => callback(null, data)\n        ).catch(\n        err => callback(err)\n        )\n}\n\nexport const editJob = (_id, body, callback) => {\n    const { title, location, deadlineSubmit, joinDate,\n        category, salary, offer, hashTag, content } = body\n    Jobs.findByIdAndUpdate(\n        _id,\n        {\n            title, location, deadlineSubmit, joinDate,\n            category, salary, offer, hashTag, content\n        },\n        { new: true },\n        (err, data) => {\n            if (err) return callback(err)\n            return callback(null, data)\n        }\n    )\n}\n\nexport const removeJob = (_id, callback) => {\n    Jobs.remove({ _id }, err => {\n        if (err) return callback(err)\n        return callback(null)\n    })\n}"]}