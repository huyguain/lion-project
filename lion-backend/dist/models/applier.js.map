{"version":3,"sources":["../../src/models/applier.js"],"names":["applierSchema","Schema","fullName","String","email","jobApply","type","Types","ObjectId","ref","location","graduationYear","Number","cpa","phoneNumber","category","major","university","typeJob","Boolean","wordExperience","cv","Applier","mongoose","model","createApplier","body","callback","create","err","data","listApplier","find","sort","_id","populate","path","then","catch","getOneApplier","console","log","editApplier","findByIdAndUpdate","new","removeApplier","remove"],"mappings":"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","file":"applier.js","sourcesContent":["import mongoose, { Schema } from 'mongoose'\nimport { LocationTable } from './location'\n\nlet applierSchema = new Schema({\n    fullName: String,\n    email: String,\n    jobApply: {\n        type: Schema.Types.ObjectId,\n        ref: 'Jobs'\n    },\n    location: {\n        type: Schema.Types.ObjectId,\n        ref: 'Location'\n    },\n    graduationYear: Number,\n    cpa: Number,\n    phoneNumber: String,\n    category: {\n        type: Schema.Types.ObjectId,\n        ref: 'category'\n    },\n    major: String,\n    university: {\n        type: Schema.Types.ObjectId,\n        ref: 'University'\n    },\n    typeJob: Boolean, \n    wordExperience: String, \n    cv: String\n})\n\nexport const Applier = mongoose.model('Applier', applierSchema);\n\nexport const createApplier = (body, callback) => {\n    const { fullName, email, location, jobApply, graduationYear,\n        cpa, phoneNumber, category, major, typeJob, wordExperience, cv, university } = body\n    Applier.create({\n        fullName,\n        email,\n        location,\n        jobApply,\n        graduationYear,\n        cpa,\n        phoneNumber,\n        category,\n        major,\n        university,\n        typeJob,\n        wordExperience,\n        cv\n    }, (err, data) => {\n        if (err) return callback(err)\n        return callback(null, data)\n    })\n}\n\nexport const listApplier = (callback) => {\n    Applier.find({}).\n        sort({ _id: -1 }).\n        populate({\n            path: 'jobApply',\n            populate: { path: 'location' }\n        }).\n        populate(\"location\").\n        populate(\"category\").\n        populate(\"university\").\n        then(\n            data => callback(null, data)\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const getOneApplier = (_id, callback) => {\n    console.log(_id)\n    Applier.find({ _id }).\n        populate({\n            path: 'jobApply',\n            populate: { path: 'location' }\n        }).\n        populate(\"location\").\n        populate(\"category\").\n        populate(\"university\").\n        then(\n            data => callback(null, data)\n        ).catch(\n            err => callback(err)\n        )\n}\n\nexport const editApplier = (_id, body, callback) => {\n    const { fullName, email, jobApply, location, graduationYear,\n        cpa, phoneNumber, category, major, typeJob, wordExperience, cv } = body\n    Applier.findByIdAndUpdate(\n        _id,\n        {\n            fullName, email, jobApply, location, graduationYear,\n            cpa, phoneNumber, category, major, typeJob, wordExperience, cv\n        },\n        { new: true },\n        (err, data) => {\n            if (err) return callback(err)\n            return callback(null, data)\n        }\n    )\n}\n\nexport const removeApplier = (_id, callback) => {\n    Applier.remove({ _id }, err => {\n        if (err) return callback(err)\n        return callback(null)\n    })\n}"]}