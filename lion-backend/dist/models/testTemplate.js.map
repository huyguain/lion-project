{"version":3,"sources":["../../src/models/testTemplate.js"],"names":["TestTemplateModel","Schema","language","type","String","required","testName","easy","Number","min","medium","hard","passScore","duration","deleteVisible","Boolean","default","defaultEntryTest","testTemplateTable","mongoose","model","createTestTemplate","dataTemplate","_testTemplateTable","dataRef","updateTestTemplate","save","err","data","dataUpdate","update","multi","exec","getTemplateDefaultEntry","findOne","getTestTemplate","course","callback","datas","_getAllTemplate","find","getTemplate","_data","getTemplateById","_id","_deleteTemplateById","remove"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,oBAAoB,IAAIC,gBAAJ,CAAW;AAC/BC,cAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADqB;AAE/BC,cAAU,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFqB;AAG/BE,UAAM;AACFJ,cAAMK,MADJ;AAEFC,aAAK;AAFH,KAHyB;AAO/BC,YAAQ;AACJP,cAAMK,MADF;AAEJC,aAAK;AAFD,KAPuB;AAW/BE,UAAM;AACFR,cAAMK,MADJ;AAEFC,aAAK;AAFH,KAXyB;AAe/BG,eAAWJ,MAfoB;AAgB/BK,cAAU;AACNV,cAAMK,MADA;AAENC,aAAK;AAFC,KAhBqB;AAoB/BK,mBAAe;AACXX,cAAMY,OADK;AAEXC,iBAAS;AAFE,KApBgB;AAwB/BC,sBAAkB;AACdd,cAAMY,OADQ;AAEdC,iBAAS;AAFK;AAxBa,CAAX,CAAxB;AA6BA,IAAME,oBAAoBC,mBAASC,KAAT,CAAe,cAAf,EAA+BpB,iBAA/B,CAA1B;;AAEA;AACO,IAAMqB;AAAA,uEAAqB,iBAAOC,YAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BC,0CAD0B,GACL,IAAIL,iBAAJ,CAAsB;AAC3ChB,sCAAUoB,aAAapB,QADoB;AAE3CI,sCAAUgB,aAAahB,QAFoB;AAG3CC,kCAAMe,aAAaf,IAHwB;AAI3CG,oCAAQY,aAAaZ,MAJsB;AAK3CC,kCAAMW,aAAaX,IALwB;AAM3CC,uCAAWU,aAAaV,SANmB;AAO3CC,sCAAUS,aAAaT,QAPoB;AAQ3CI,8CAAkBK,aAAaL,gBARY;AAS3CH,2CAAeQ,aAAaR;AATe,yBAAtB,CADK;;AAAA,8BAY1BQ,aAAaL,gBAAb,KAAkC,IAZR;AAAA;AAAA;AAAA;;AAapBO,+BAboB,GAaV;AACZtB,sCAAUoB,aAAapB,QADX;AAEZe,8CAAkB;AAFN,yBAbU;AAAA;AAAA,+BAiBpBQ,mBAAmBD,OAAnB,EAA4B,EAAEP,kBAAkB,KAApB,EAA5B,CAjBoB;;AAAA;AAAA,yDAmBvBM,mBAAmBG,IAAnB,CAAwB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1C,gCAAID,GAAJ,EAAS;AACL,uCAAQ,wBAAR;AACH,6BAFD,MAEO;AACH,uCAAOC,IAAP;AACH;AACJ,yBANM,CAnBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;AA2BA,IAAMH;AAAA,wEAAqB,kBAAOD,OAAP,EAAgBK,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,0DACvBX,kBAAkBY,MAAlB,CAAyBN,OAAzB,EAAkCK,UAAlC,EAA8C,EAAEE,OAAO,IAAT,EAA9C,EACFC,IADE,CACG,UAACL,GAAD,EAAMC,IAAN,EAAe;AACjB,gCAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,mCAAOC,IAAP;AACH,yBAJE,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAOA,IAAMK;AAAA,wEAA0B,kBAAO/B,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0DAC5BgB,kBAAkBgB,OAAlB,CAA0B;AAC7BhC,8CAD6B,EACnBe,kBAAkB;AADC,yBAA1B,EAEJe,IAFI,CAEC,UAACL,GAAD,EAAMC,IAAN,EAAe;AACnB,gCAAID,GAAJ,EAAS,2CAAyCA,GAAzC,CAAT,KACK,OAAOC,IAAP;AACR,yBALM,CAD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA,GAAN;AAQP;AACO,IAAMO;AAAA,wEAAkB,kBAAOC,MAAP,EAAe9B,QAAf,EAAyB+B,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEjBnB,kBAAkBgB,OAAlB,CAA0B;AAC5BhC,sCAAUkC,MADkB,EACV9B,UAAUA;AADA,yBAA1B,EAEH0B,IAFG,CAEE,UAACL,GAAD,EAAMW,KAAN,EAAgB;AACpB,mCAAOD,SAAS,IAAT,EAAeC,KAAf,CAAP;AACH,yBAJK,CAFiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAQhBD,sBARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAWA,IAAME,4CAAkB,SAAlBA,eAAkB,GAAM;AACjC,WAAOrB,kBAAkBsB,IAAlB,CAAuB,EAAE1B,eAAe,KAAjB,EAAvB,EAAiD,UAACa,GAAD,EAAMC,IAAN,EAAe;AACnE,YAAID,GAAJ,EAAS;AACL,mBAAQ,qBAAR;AACH,SAFD,MAEO;AACH,mBAAOC,IAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM;AASA,IAAMa;AAAA,wEAAc,kBAAOvC,QAAP,EAAiBI,QAAjB,EAA2B+B,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEbnB,kBAAkBgB,OAAlB,CAA0B;AAC5BhC,8CAD4B;AAE5BI;AAF4B,yBAA1B,EAGH0B,IAHG,CAGE,UAACL,GAAD,EAAMe,KAAN,EAAgB;AACpB,mCAAOL,SAAS,IAAT,EAAeK,KAAf,CAAP;AACH,yBALK,CAFa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DASZL,sBATY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;AAYA,IAAMM;AAAA,wEAAkB,kBAAOC,GAAP,EAAYP,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEvBnB,0CAAkBgB,OAAlB,CAA0B,EAAEU,QAAF,EAA1B,EAAmC,UAACjB,GAAD,EAAMC,IAAN,EAAe;AAC9C,mCAAOS,SAAS,IAAT,EAAeT,IAAf,CAAP;AACH,yBAFD;AAFuB;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAMhBS,sBANgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;AASA,IAAMQ,oDAAsB,SAAtBA,mBAAsB,CAACD,GAAD,EAAS;AACxC,WAAO1B,kBAAkB4B,MAAlB,CAAyB,EAAEF,QAAF,EAAzB,EAAmC,eAAO;AAC7C,YAAIjB,GAAJ,EAAS;AACL,mBAAOA,GAAP;AACH,SAFD,MAEO;AACH,mBAAO,CAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM","file":"testTemplate.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport { type } from 'os';\r\nimport { duration, relativeTimeRounding } from 'moment';\r\n\r\nlet TestTemplateModel = new Schema({\r\n    language: { type: String, required: true },\r\n    testName: { type: String, required: true },\r\n    easy: {\r\n        type: Number,\r\n        min: 0,\r\n    },\r\n    medium: {\r\n        type: Number,\r\n        min: 0,\r\n    },\r\n    hard: {\r\n        type: Number,\r\n        min: 0,\r\n    },\r\n    passScore: Number,\r\n    duration: {\r\n        type: Number,\r\n        min: 0,\r\n    },\r\n    deleteVisible: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    defaultEntryTest: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n})\r\nconst testTemplateTable = mongoose.model('TestTemplate', TestTemplateModel)\r\n\r\n//createTemplate\r\nexport const createTestTemplate = async (dataTemplate) => {\r\n    let _testTemplateTable = new testTemplateTable({\r\n        language: dataTemplate.language,\r\n        testName: dataTemplate.testName,\r\n        easy: dataTemplate.easy,\r\n        medium: dataTemplate.medium,\r\n        hard: dataTemplate.hard,\r\n        passScore: dataTemplate.passScore,\r\n        duration: dataTemplate.duration,\r\n        defaultEntryTest: dataTemplate.defaultEntryTest,\r\n        deleteVisible: dataTemplate.deleteVisible,\r\n    })\r\n    if (dataTemplate.defaultEntryTest === true) {\r\n        const dataRef = {\r\n            language: dataTemplate.language,\r\n            defaultEntryTest: true,\r\n        }\r\n        await updateTestTemplate(dataRef, { defaultEntryTest: false })\r\n    }\r\n    return _testTemplateTable.save((err, data) => {\r\n        if (err) {\r\n            return ('Create Template Error!')\r\n        } else {\r\n            return data;\r\n        }\r\n    })\r\n}\r\nexport const updateTestTemplate = async (dataRef, dataUpdate) => {\r\n    return testTemplateTable.update(dataRef, dataUpdate, { multi: true })\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\nexport const getTemplateDefaultEntry = async (language) => {\r\n    return testTemplateTable.findOne({\r\n        language, defaultEntryTest: true\r\n    }).exec((err, data) => {\r\n        if (err) throw `Get Template Default Entry Test ${err}`;\r\n        else return data\r\n    })\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////\r\nexport const getTestTemplate = async (course, testName, callback) => {\r\n    try {\r\n        await testTemplateTable.findOne({\r\n            language: course, testName: testName\r\n        }).exec((err, datas) => {\r\n            return callback(null, datas)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const _getAllTemplate = () => {\r\n    return testTemplateTable.find({ deleteVisible: false }, (err, data) => {\r\n        if (err) {\r\n            return ('Get Template Error!')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\nexport const getTemplate = async (language, testName, callback) => {\r\n    try {\r\n        await testTemplateTable.findOne({\r\n            language,\r\n            testName\r\n        }).exec((err, _data) => {\r\n            return callback(null, _data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const getTemplateById = async (_id, callback) => {\r\n    try {\r\n        testTemplateTable.findOne({ _id }, (err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const _deleteTemplateById = (_id) => {\r\n    return testTemplateTable.remove({ _id }, (err => {\r\n        if (err) {\r\n            return err;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }))\r\n}"]}