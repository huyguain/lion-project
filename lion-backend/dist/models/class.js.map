{"version":3,"sources":["../../src/models/class.js"],"names":["ClassFresher","Schema","className","String","fresherIds","type","Types","ObjectId","ref","learningPathCustomiseIds","startDate","Date","endDate","classTable","mongoose","model","_createClass","dataClass","_classTable","save","err","data","_getClassByClassName","findOne","exec","_getAllClass","find","populate","path","select","_deleteClass","_id","remove","_getClassById","_editClass","findOneAndUpdate","new"],"mappings":"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","file":"class.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nconst ClassFresher = new Schema({\r\n    className: String,\r\n    fresherIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Fresher'\r\n    }],\r\n    learningPathCustomiseIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'LearningCustomise'\r\n    }],\r\n    startDate: Date,\r\n    endDate: Date,\r\n})\r\nconst classTable = mongoose.model('ClassFresher', ClassFresher);\r\n//createClass\r\nexport const _createClass = (dataClass) => {\r\n    let _classTable = new classTable({\r\n        className: dataClass.className,\r\n        fresherIds: dataClass.fresherIds,\r\n        learningPathCustomiseIds: dataClass.learningPathCustomiseIds,\r\n        startDate: dataClass.startDate,\r\n        endDate: dataClass.endDate,\r\n    })\r\n    return _classTable.save((err, data) => {\r\n        if (err) {\r\n            return ('Create Class Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\n//getClassByClassName\r\nexport const _getClassByClassName = (className) => {\r\n    return classTable.findOne({ className }).exec((err, data) => {\r\n        if (err) {\r\n            return ('Get Class Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\n//getAllClass\r\nexport const _getAllClass = () => {\r\n    return classTable.find({})\r\n        .populate({\r\n            path: 'learningPathCustomiseIds',\r\n            select: ['learningPath']\r\n        })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Class Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}\r\n//deleteClass\r\nexport const _deleteClass = (_id) => {\r\n    return classTable.remove({ _id }, err => {\r\n        if (err) {\r\n            return ('Delete Class Error !')\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n}\r\n//getClassById\r\nexport const _getClassById = (_id) => {\r\n    return classTable.findOne({ _id })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Class Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}\r\n//editClass\r\nexport const _editClass = (_id, dataClass) => {\r\n    return classTable.findOneAndUpdate({ _id }, {\r\n        className: dataClass.className,\r\n        fresherIds: dataClass.fresherIds,\r\n        learningPathCustomiseIds: dataClass.learningPathCustomiseIds,\r\n        startDate: dataClass.startDate,\r\n        endDate: dataClass.endDate,\r\n    }, { new: true }).exec((err, data) => {\r\n        if (err) {\r\n            return ('Update Class Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}"]}