{"version":3,"sources":["../../src/models/LearningPath.js"],"names":["LearningPath","Schema","language","String","learningPath","title","content","courseIds","type","Types","ObjectId","ref","LearningPathTable","mongoose","model","createLearningPath","callback","create","err","data","listLearningPath","find","populate","path","select","then","catch","getLearningById","_id","findOne","_getLearningPath","exec","editLearningById","id","findByIdAndUpdate","new","removeLearning","remove","listLearning","_getLearningPathName"],"mappings":"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","file":"LearningPath.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nlet LearningPath = new Schema({\r\n    language: String,\r\n    learningPath: String,\r\n    title: String,\r\n    content: String,\r\n    courseIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Course'\r\n    }]\r\n})\r\nconst LearningPathTable = mongoose.model('Learning', LearningPath)\r\nexport const createLearningPath = (language, learningPath, courseIds, title, content, callback) => {\r\n    LearningPathTable.create({\r\n        language,\r\n        learningPath,\r\n        courseIds,\r\n        title,\r\n        content\r\n    }, (err, data) => {\r\n        if (err) return callback(err)\r\n        callback(null, data)\r\n    })\r\n}\r\n\r\nexport const listLearningPath = (callback) => {\r\n    LearningPathTable.find({}).\r\n        populate({\r\n            path: \"courseIds\",\r\n            select: [\"_id\", \"language\", \"courseName\", \"urlIcon\", \"urlImage\", \"__v\"]\r\n        }).\r\n        then(data => callback(null, data)).\r\n        catch(err => callback(err))\r\n}\r\n\r\nexport const getLearningById = (_id, callback) => {\r\n    LearningPathTable.findOne({ _id }).populate({\r\n        path: \"courseIds\",\r\n        select: [\"_id\", \"language\", \"courseName\", \"urlIcon\", \"urlImage\", \"__v\"]\r\n    }).then(\r\n        data => {\r\n            callback(null, data)\r\n        }\r\n        ).catch(\r\n        err => callback(err)\r\n        )\r\n}\r\n//getLearningPath\r\nexport const _getLearningPath = (_id) => {\r\n    return LearningPathTable.findOne({ _id })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Learning Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n\r\n}\r\nexport const editLearningById = (id, language, learningPath, courseIds, title, content, callback) => {\r\n    LearningPathTable.findByIdAndUpdate(id,\r\n        { language, learningPath, courseIds, title, content },\r\n        { new: true },\r\n        (err, data) => {\r\n            if (err) return callback(err)\r\n            return callback(null, data)\r\n        }\r\n    )\r\n}\r\n\r\nexport const removeLearning = (_id, callback) => {\r\n    LearningPathTable.remove({ _id }, err => {\r\n        if (err) return callback(err)\r\n        else return callback(null)\r\n    })\r\n}\r\n\r\n\r\nexport const listLearning = (courseIds) => {\r\n    return LearningPathTable.find({ courseIds }).\r\n        exec((err, data) => {\r\n            if (err) return err;\r\n            return data\r\n        })\r\n}\r\n//getLearningPathName\r\nexport const _getLearningPathName = () => {\r\n    return LearningPathTable.find({}).select({ learningPath: 1 }).exec((err, data) => {\r\n        if (err) {\r\n            throw ('Get Data Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}"]}