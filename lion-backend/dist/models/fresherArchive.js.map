{"version":3,"sources":["../../src/models/fresherArchive.js"],"names":["FresherArchive","Schema","firstName","String","lastName","userName","passWord","mobile","Number","language","program","note","StartDate","Date","finalIds","type","Types","ObjectId","ref","university","token","Unit","fresherArchiveTable","mongoose","model","createFresherArchive","dataCreate","fresherArchive","save","err","data","getFresherArchive","dataSearch","find","populate","exec","updateFresherArchive","_id","dataUpdate","findOneAndUpdate","new","deleteFresherArchive","dataDelete","remove"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,iBAAiB,IAAIC,gBAAJ,CAAW;AAC9BC,eAAWC,MADmB;AAE9BC,cAAUD,MAFoB;AAG9BE,cAAUF,MAHoB;AAI9BG,cAAUH,MAJoB;AAK9BI,YAAQC,MALsB;AAM9BC,cAAUN,MANoB;AAO9BO,aAASP,MAPqB;AAQ9BQ,UAAMR,MARwB;AAS9BS,eAAWC,IATmB;AAU9BC,cAAU,CAAC;AACPC,cAAMd,iBAAOe,KAAP,CAAaC,QADZ;AAEPC,aAAK;AAFE,KAAD,CAVoB;AAc9BC,gBAAYhB,MAdkB;AAe9BiB,WAAOjB,MAfuB;AAgB9BkB,UAAMlB;AAhBwB,CAAX,CAAvB;AAkBA,IAAMmB,sBAAsBC,mBAASC,KAAT,CAAe,gBAAf,EAAiCxB,cAAjC,CAA5B;;AAEO,IAAMyB,sDAAuB,SAAvBA,oBAAuB,CAACC,UAAD,EAAgB;AAChD,QAAIC,iBAAiB,IAAIL,mBAAJ,CAAwB,EAAEI,sBAAF,EAAxB,CAArB;AACA,WAAOC,eAAeC,IAAf,CAAoB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtC,YAAID,GAAJ,EAAS,yBAAuBA,GAAvB;AACT,eAAOC,IAAP;AACH,KAHM,CAAP;AAIH,CANM;;AAQA,IAAMC,gDAAoB,SAApBA,iBAAoB,CAACC,UAAD,EAAgB;AAC7C,WAAOV,oBACFW,IADE,CACGD,UADH,EAEFE,QAFE,CAEO,UAFP,EAGFC,IAHE,CAGG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KANE,CAAP;AAOH,CARM;;AAUA,IAAMM,sDAAuB,SAAvBA,oBAAuB,CAACC,GAAD,EAAMC,UAAN,EAAqB;AACrD,WAAOhB,oBACFiB,gBADE,CACe,EAAEF,QAAF,EADf,EAEHC,UAFG,EAES,EAAEE,KAAK,IAAP,EAFT,EAGFL,IAHE,CAGG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KANE,CAAP;AAOH,CARM;;AAUA,IAAMW,sDAAuB,SAAvBA,oBAAuB,CAACC,UAAD,EAAgB;AAChD,WAAOpB,oBACFqB,MADE,CACKD,UADL,EAEFP,IAFE,CAEG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KALE,CAAP;AAMH,CAPM","file":"fresherArchive.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nconst FresherArchive = new Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    userName: String,\r\n    passWord: String,\r\n    mobile: Number,\r\n    language: String,\r\n    program: String,\r\n    note: String,\r\n    StartDate: Date,\r\n    finalIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Final'\r\n    }],\r\n    university: String,\r\n    token: String,\r\n    Unit: String,\r\n})\r\nconst fresherArchiveTable = mongoose.model('FresherArchive', FresherArchive)\r\n\r\nexport const createFresherArchive = (dataCreate) => {\r\n    let fresherArchive = new fresherArchiveTable({ dataCreate });\r\n    return fresherArchive.save((err, data) => {\r\n        if (err) throw `Create Error: ${err}`;\r\n        return data;\r\n    })\r\n}\r\n\r\nexport const getFresherArchive = (dataSearch) => {\r\n    return fresherArchiveTable\r\n        .find(dataSearch)\r\n        .populate('finalIds')\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const updateFresherArchive = (_id, dataUpdate) => {\r\n    return fresherArchiveTable\r\n        .findOneAndUpdate({ _id },\r\n        dataUpdate, { new: true })\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const deleteFresherArchive = (dataDelete) => {\r\n    return fresherArchiveTable\r\n        .remove(dataDelete)\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}"]}