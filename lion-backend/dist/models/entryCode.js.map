{"version":3,"sources":["../../src/models/entryCode.js"],"names":["EntryCode","Schema","code","type","String","required","createCode","Date","default","deadline","startTime","endTime","candidateId","Types","ref","questionIds","ObjectId","templateId","englishExamId","answers","point","Number","result","status","Boolean","entryCodeTable","mongoose","model","_getAllEntryCode","find","select","populate","path","exec","err","data","console","log","_deleteEntryCode","_id","remove","deleteEntryCodeModel","id","findOneAndRemove","response","deleteEntryCodeByUserId","userId","callback","_createEntryCode","dataQuestion","_entryCodeTable","save","addEntryCode","exam","newEntryCode","then","catch","addEntryCodeEnglish","setMonth","getMonth","create","saveEntryCodeEnglishToDB","obj","message","findCode","findOne","updateEntryCode","dataInput","conditions","update","findOneAndUpdate","new","editEntryCode","entryCode","endTestModel","duration","count","i","length","j","a","b","sort","correct","passScore","parse","finishTestModel","Math","ceil","checkCode","getGenByTemplateId","_updateGenByTemplateId","$exists","multi","detailResultTest","_regenerate","_deleteEntryCodeByCandi","endEnglishTestModel","list_answer","questions","pop","forEach","answerElement","question","essay","correct_answer","option_answer","_createEntryEnglish","getAllEnglishTestModel","firstName","lastName","dataRs","filter","Object","keys","item","_doc","map","key","undefined","countEnglishNotPointModel","getQuestionEssayEnglishTestModel","english_exam","question_essay","answer_essay","answer","totalQuestion","savePointEssayToDbModel","idExam","entryTest","parseInt","_deleteEntryByTemplate","_getAllEntryByTemplate"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAIA,YAAY,IAAIC,gBAAJ,CAAW;AACvBC,UAAM,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADiB;AAEvBC,gBAAY;AACRH,cAAMI,IADE;AAERC,iBAAS,IAAID,IAAJ;AAFD,KAFW;AAMvBE,cAAUF,IANa;AAOvBG,eAAWH,IAPY;AAQvBI,aAASJ,IARc;AASvBK,iBAAa;AACTT,cAAMF,iBAAOY,KAAP,CAAaT,MADV;AAETU,aAAK;AAFI,KATU;AAavBC,iBAAa,CAAC;AACVZ,cAAMF,iBAAOY,KAAP,CAAaG,QADT;AAEVF,aAAK;AAFK,KAAD,CAbU;AAiBvBG,gBAAY;AACRd,cAAMF,iBAAOY,KAAP,CAAaG,QADX;AAERF,aAAK;AAFG,KAjBW;AAqBvBI,mBAAe;AACXf,cAAMF,iBAAOY,KAAP,CAAaG,QADR;AAEXF,aAAK;AAFM,KArBQ;AAyBvBK,aAAS,EAzBc;AA0BvBC,WAAOC,MA1BgB;AA2BvBC,YAAQlB,MA3Be;AA4BvBmB,YAAQC;AA5Be,CAAX,CAAhB;AA8BA,IAAMC,iBAAiBC,mBAASC,KAAT,CAAe,WAAf,EAA4B3B,SAA5B,CAAvB;;AAGO,IAAM4B,8CAAmB,SAAnBA,gBAAmB,GAAM;AAClC,WAAOH,eAAeI,IAAf,CAAoB,EAApB,EACHC,MADG,CACI,EAAErB,UAAU,CAAZ,EAAeH,YAAY,CAA3B,EAA8Bc,OAAO,CAArC,EAAwClB,MAAM,CAA9C,EAAiDQ,WAAW,CAA5D,EAA+DC,SAAS,CAAxE,EAA2EW,QAAQ,CAAnF,EAAsFP,aAAa,CAAnG,EADJ,EAEHgB,QAFG,CAEM;AACLC,cAAM;AADD,KAFN,EAKFD,QALE,CAKO;AACNC,cAAM;AADA,KALP,EAQFD,QARE,CAQO,eARP,EASFA,QATE,CASO;AACNC,cAAM;AADA,KATP,EAYFC,IAZE,CAYG,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS;AACLE,oBAAQC,GAAR,CAAYH,GAAZ;AACA,mBAAQ,wBAAR;AACH,SAHD,MAGO;AACH,mBAAOC,IAAP;AACH;AACJ,KAnBE,CAAP;AAoBH,CArBM;AAsBP;AACO,IAAMG,8CAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAS;AACrC,WAAOd,eAAee,MAAf,CAAsB,EAAED,QAAF,EAAtB,EAAgC,eAAO;AAC1C,YAAIL,GAAJ,EAAS;AACL,mBAAQ,2BAAR;AACH,SAFD,MAEO;AACH,mBAAO,CAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM;AASA,IAAMO,sDAAuB,SAAvBA,oBAAuB,CAACC,EAAD,EAAQ;AACxCjB,mBAAekB,gBAAf,CAAgC,EAAEJ,KAAKG,EAAP,EAAhC,EAA6C,UAACR,GAAD,EAAMU,QAAN,EAAmB;AAC5D,YAAIV,GAAJ,EAAS,OAAOA,GAAP;AACZ,KAFD;AAGH,CAJM;AAKA,IAAMW,4DAA0B,SAA1BA,uBAA0B,CAACC,MAAD,EAASC,QAAT,EAAsB;AACzD,WAAOtB,eAAee,MAAf,CAAsB,EAAEM,cAAF,EAAtB,EAAmC,eAAO;AAC7C,YAAIZ,GAAJ,EAAS,OAAOa,SAASb,GAAT,CAAP;AACZ,KAFM,CAAP;AAGH,CAJM;AAKP;AACO,IAAMc,8CAAmB,SAAnBA,gBAAmB,CAACC,YAAD,EAAerC,WAAf,EAA4BK,UAA5B,EAAwCR,QAAxC,EAAqD;AACjF,QAAIyC,kBAAkB,IAAIzB,cAAJ,CAAmB;AACrCvB,cAAM,oBAD+B;AAErCa,qBAAakC,YAFwB;AAGrCrC,gCAHqC;AAIrCH,0BAJqC;AAKrCQ;AALqC,KAAnB,CAAtB;AAOA,WAAOiC,gBAAgBC,IAAhB,CAAqB,UAACjB,GAAD,EAAMC,IAAN,EAAe;AACvC,YAAID,GAAJ,EAAS;AACL,kBAAO,2BAAP;AACH,SAFD,MAEO;AACH,mBAAOC,IAAP;AACH;AACJ,KANM,CAAP;AAOH,CAfM;AAgBA,IAAMiB;AAAA,uEAAe,iBAAOC,IAAP,EAAaP,MAAb,EAAqB7B,UAArB,EAAiCR,QAAjC,EAA2CsC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBO,oCADoB,GACL,IAAI7B,cAAJ,CAAmB;AAClC,oCAAQ,oBAD0B;AAElC,2CAAe4B,IAFmB;AAGlCP,0CAHkC;AAIlCrC,8CAJkC;AAKlCQ;AALkC,yBAAnB,CADK;AAAA;AAAA,+BAQlBqC,aAAaH,IAAb,CAAkB,UAACjB,GAAD,EAAMC,IAAN,EAAe;AACnC,gCAAID,GAAJ,EAAS,MAAMA,GAAN;AACZ,yBAFK,EAEHqB,IAFG,CAEE,gBAAQ;AACZ,mCAAOR,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,yBAJK,EAIHqB,KAJG,CAIG,eAAO;AACZ,mCAAOT,SAASb,GAAT,CAAP;AACH,yBANK,CARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;AAgBA,IAAMuB;AAAA,wEAAsB,kBAAOX,MAAP,EAAe5B,aAAf,EAA8B6B,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BtC,gCAD2B,GAChB,IAAIF,IAAJ,EADgB;;AAE/BE,iCAASiD,QAAT,CAAkBjD,SAASkD,QAAT,KAAsB,CAAxC;AAF+B;AAAA,+BAGzBlC,eAAemC,MAAf,CAAsB;AACxB1D,kCAAM,oBADkB;AAExB4C,0CAFwB;AAGxB5B,wDAHwB;AAIxBT;AAJwB,yBAAtB,EAKH,UAACyB,GAAD,EAAMC,IAAN,EAAe;AACd,gCAAID,GAAJ,EAAS,OAAOa,SAASb,GAAT,CAAP;AACT,mCAAOa,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,yBARK,CAHyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAcA,IAAM0B;AAAA,wEAA2B,kBAAOf,MAAP,EAAe5B,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCT,gCADgC,GACrB,IAAIF,IAAJ,EADqB;;AAEpCE,iCAASiD,QAAT,CAAkBjD,SAASkD,QAAT,KAAsB,CAAxC;AACIG,2BAHgC,GAG1B;AACN5D,kCAAM,oBADA;AAEN4C,0CAFM;AAGN5B,wDAHM;AAINT;AAJM,yBAH0B;AAAA;AAAA;AAAA,+BAUbgB,eAAemC,MAAf,CAAsBE,GAAtB,CAVa;;AAAA;AAU5BxC,8BAV4B;AAAA,0DAWzB;AACHyC,qCAAS,IADN;AAEH5B,kCAAMb;AAFH,yBAXyB;;AAAA;AAAA;AAAA;AAAA,0DAgBzB;AACHyC,qCAAS,KADN;AAEH5B;AAFG,yBAhByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAwBA,IAAM6B,8BAAW,SAAXA,QAAW,CAAC9D,IAAD,EAAU;AAC9B,WAAOuB,eAAewC,OAAf,CAAuB,EAAE/D,UAAF,EAAvB,EACF6B,QADE,CACO,YADP,EAEFA,QAFE,CAEO,aAFP,EAGFA,QAHE,CAGO,eAHP,EAIFA,QAJE,CAIO,aAJP,EAKFE,IALE,CAKG,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KARE,CAAP;AASH,CAVM;AAWA,IAAM+B,4CAAkB,SAAlBA,eAAkB,CAACC,SAAD,EAAe;AAAA,QAClCC,UADkC,GACXD,SADW,CAClCC,UADkC;AAAA,QACtBC,MADsB,GACXF,SADW,CACtBE,MADsB;;AAE1C,WAAO5C,eAAe6C,gBAAf,CAAgCF,UAAhC,EAA4CC,MAA5C,EAAoD,EAAEE,KAAK,IAAP,EAApD,EACHtC,IADG,CACE,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KAJE,CAAP;AAMH,CARM;AASA,IAAMqC;AAAA,wEAAgB,kBAAOjC,GAAP,EAAYxB,WAAZ,EAAyBN,QAAzB,EAAmCsC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACHtB,eAAewC,OAAf,CAAuB,EAAE1B,QAAF,EAAvB,EAAgCT,MAAhC,CAAuC,EAAEV,OAAO,CAAT,EAAvC,CADG;;AAAA;AACrBqD,iCADqB;AAAA;AAAA;AAAA,+BAGfhD,eAAe6C,gBAAf,CAAgC,EAAE/B,QAAF,EAAhC,EACF,EAAErC,MAAM,oBAAR,EAAeO,UAAUA,QAAzB,EAAmCM,aAAaA,WAAhD,EADE,EAEF,EAAEwD,KAAK,IAAP,EAFE,EAGF,UAACrC,GAAD,EAAMC,IAAN,EAAe;AACX,mCAAOY,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,yBALC,CAHe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAUdY,sBAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAaA,IAAM2B,sCAAe,SAAfA,YAAe,CAACC,QAAD,EAAWxD,OAAX,EAAoBjB,IAApB,EAA0B6C,QAA1B,EAAuC;AAC/DtB,mBAAewC,OAAf,CAAuB,EAAE/D,UAAF,EAAvB,EACK6B,QADL,CACc,aADd,EAEKA,QAFL,CAEc,YAFd,EAGKwB,IAHL,CAGU,kBAAU;AACZnB,gBAAQC,GAAR,CAAY,SAAZ,EAAuBlB,OAAvB;AACAiB,gBAAQC,GAAR,CAAY,SAAZ,EAAuBf,MAAvB;AACA,YAAIsD,QAAQ,CAAZ;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI1D,QAAQ2D,MAA5B,EAAoCD,GAApC,EAAyC;AACrC,iBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIzD,OAAOP,WAAP,CAAmB+D,MAAvC,EAA+CC,GAA/C,EAAoD;AAChD,oBAAI5D,QAAQ0D,CAAR,EAAWnC,EAAX,IAAiBpB,OAAOP,WAAP,CAAmBgE,CAAnB,EAAsBxC,GAA3C,EAAgD;AAC5C,wBAAIyC,UAAJ;AAAA,wBAAOC,UAAP;AACA;AACAD,wBAAI7D,QAAQ0D,CAAR,EAAW1D,OAAX,CAAmB+D,IAAnB,KAA4B,EAAhC;AACAD,wBAAI3D,OAAOP,WAAP,CAAmBgE,CAAnB,EAAsBI,OAAtB,CAA8BD,IAA9B,KAAuC,EAA3C;AACA,wBAAIF,MAAMC,CAAV,EAAa;AACTL;AACH;AACD;AACH;AACJ;AACJ;AACD;AACAtD,eAAOF,KAAP,GAAewD,KAAf;AACAtD,eAAOA,MAAP,GAAmBsD,QAAQtD,OAAOP,WAAP,CAAmB+D,MAA5B,GAAsC,GAAvC,IAA+CxD,OAAOL,UAAP,CAAkBmE,SAAjE,GAA6E,MAA7E,GAAsF,MAAvG;AACA,YAAK7E,KAAK8E,KAAL,CAAW/D,OAAOX,OAAlB,IAA6BJ,KAAK8E,KAAL,CAAW/D,OAAOZ,SAAlB,CAA9B,GAA8DiE,QAAlE,EAA4ErD,OAAOX,OAAP,GAAiB,IAAIJ,IAAJ,EAAjB;AAC5Ee,eAAOH,OAAP,GAAiBA,OAAjB;AACAG,eAAO6B,IAAP,CAAY,UAACjB,GAAD,EAAMZ,MAAN,EAAiB;AACzB,gBAAIY,GAAJ,EAASa,SAASb,GAAT;AACTa,qBAAS,IAAT,EAAezB,MAAf;AACH,SAHD;AAIH,KA9BL,EA+BKkC,KA/BL,CA+BW,eAAO;;AAEVT,iBAASb,GAAT;AACH,KAlCL;AAmCH,CApCM;AAqCP;AACO,IAAMoD,4CAAkB,SAAlBA,eAAkB,CAACpF,IAAD,EAAO6C,QAAP,EAAoB;AAC/CtB,mBAAewC,OAAf,CAAuB,EAAE/D,UAAF,EAAvB,EACK6B,QADL,CACc,YADd,EAEKA,QAFL,CAEc,aAFd,EAGKwB,IAHL,CAGU,kBAAU;AACZ,YAAMpB,OAAO;AACT,wBAAYoD,KAAKC,IAAL,CAAU,CAACjF,KAAK8E,KAAL,CAAW/D,OAAOX,OAAlB,IAA6BJ,KAAK8E,KAAL,CAAW/D,OAAOZ,SAAlB,CAA9B,IAA8D,IAA9D,GAAqE,EAA/E,CADH;AAET,qBAASY,OAAOF,KAFP;AAGT,6BAAiBE,OAAOP,WAAP,CAAmB+D,MAH3B;AAIT,sBAAUxD,OAAOA;AAJR,SAAb;AAMAyB,iBAAS,IAAT,EAAeZ,IAAf;AACH,KAXL,EAYKqB,KAZL,CAYW,eAAO;AACVT,iBAASb,GAAT;AACH,KAdL;AAgBH,CAjBM;AAkBA,IAAMuD;AAAA,wEAAY,kBAAOxE,UAAP,EAAmB6B,MAAnB,EAA2BC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEXtB,eAAewC,OAAf,CAAuB,EAAEhD,sBAAF,EAAc6B,cAAd,EAAvB,EAA+C,UAACZ,GAAD,EAAMC,IAAN,EAAe;AAChE,mCAAOY,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,yBAFK,CAFW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAMVY,SAASb,GAAT,CANU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;AASA,IAAMwD;AAAA,wEAAqB,kBAAOzE,UAAP,EAAmB8B,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEpBtB,eAAeI,IAAf,CAAoB,EAAEZ,sBAAF,EAApB,EAAoCgB,IAApC,CAAyC,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1D,mCAAOY,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,yBAFK,CAFoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAMnBY,sBANmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;AASA,IAAM4C,0DAAyB,SAAzBA,sBAAyB,CAAC1E,UAAD,EAAgB;AAClD,WAAOQ,eAAe4C,MAAf,CAAsB,EAAEpD,sBAAF,EAAcK,QAAQ,EAAEsE,SAAS,IAAX,EAAtB,EAAtB,EAAiE,EAAE3E,YAAY,IAAd,EAAjE,EAAuF,EAAE4E,OAAO,IAAT,EAAvF,EAAwG,eAAO;AAClH,YAAI3D,GAAJ,EAAS;AACL,kBAAO,2BAAP;AACH;AACJ,KAJM,CAAP;AAKH,CANM;AAOP;AACO,IAAM4D;AAAA,wEAAmB,kBAAO5F,IAAP,EAAa6C,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAElBtB,eAAewC,OAAf,CAAuB,EAAE/D,UAAF,EAAvB,EACD6B,QADC,CACQ,aADR,EAEDA,QAFC,CAEQ,eAFR,EAGDwB,IAHC,CAGI,gBAAQ;AACV;AACAR,qCAASZ,IAAT,EAAe,IAAf;AACH,yBANC,EAODqB,KAPC,CAOK,eAAO;AACVT,qCAAS,IAAT,EAAe,EAAExB,QAAQ,GAAV,EAAewC,SAAS7B,GAAxB,EAAf;AACH,yBATC,CAFkB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0DAajBa,sBAbiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAiBP;AACO,IAAMgD,oCAAc,SAAdA,WAAc,CAACxD,GAAD,EAAMU,YAAN,EAAoBxC,QAApB,EAAiC;AACxD,WAAOgB,eAAe6C,gBAAf,CAAgC,EAAE/B,QAAF,EAAhC,EAAyC;AAC5CrC,cAAM,oBADsC;AAE5CO,kBAAUA,QAFkC;AAG5CM,qBAAakC;AAH+B,KAAzC,EAIJ,EAAEsB,KAAK,IAAP,EAJI,EAIWtC,IAJX,CAIgB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAClC,YAAID,GAAJ,EAAS;AACL,mBAAQ,2BAAR;AACH,SAFD,MAEO;AACH,mBAAOC,IAAP;AACH;AACJ,KAVM,CAAP;AAWH,CAZM;AAaP;AACO,IAAM6D,4DAA0B,SAA1BA,uBAA0B,CAACpF,WAAD,EAAiB;AACpD,WAAOa,eAAee,MAAf,CAAsB,EAAE5B,wBAAF,EAAtB,EAAwC,eAAO;AAClD,YAAIsB,GAAJ,EAAS;AACL,mBAAQ,0BAAR;AACH,SAFD,MAEO;AACH,mBAAO,CAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM;;AAUP;AACO,IAAM+D,oDAAsB,SAAtBA,mBAAsB,CAACtB,QAAD,EAAWuB,WAAX,EAAwBhG,IAAxB,EAA8B6C,QAA9B,EAA2C;AAC1EtB,mBAAewC,OAAf,CAAuB,EAAE/D,MAAMA,IAAR,EAAvB,EACK6B,QADL,CACc,eADd,EAEKwB,IAFL,CAEU,UAACjC,MAAD,EAAY;AAAA,YACR6E,SADQ,GACM7E,OAAOJ,aADb,CACRiF,SADQ;;AAEdA,kBAAUC,GAAV;AACA9E,eAAOP,WAAP,GAAqBoF,SAArB;AACA,YAAI/E,QAAQ,CAAZ;AACA8E,oBAAYG,OAAZ,CAAoB,UAAUC,aAAV,EAAyB;AACzCH,sBAAUE,OAAV,CAAkB,UAAUE,QAAV,EAAoB;AAClC,oBAAIA,SAASC,KAAb,EAAoB;AAChB;AACH;AACD,oBAAIF,cAAc5D,EAAd,IAAoB6D,SAAShE,GAAjC,EAAsC;AAClC,wBAAIkE,uBAAJ;AAAA,wBAAoBC,sBAApB;AACAD,qCAAiBF,SAASpB,OAAT,CAAiBD,IAAjB,KAA0B,EAA3C;AACAwB,oCAAgBJ,cAAcnF,OAAd,CAAsB+D,IAAtB,KAA+B,EAA/C;AACA,wBAAIuB,mBAAmBC,aAAvB,EAAsC;AAClCtF;AACH;AACD;AACH;AACJ,aAbD;AAcH,SAfD;AAgBAE,eAAOF,KAAP,GAAeA,KAAf;AACA,YAAKb,KAAK8E,KAAL,CAAW/D,OAAOX,OAAlB,IAA6BJ,KAAK8E,KAAL,CAAW/D,OAAOZ,SAAlB,CAA9B,GAA8DiE,QAAlE,EAA4ErD,OAAOX,OAAP,GAAiB,IAAIJ,IAAJ,EAAjB;AAC5Ee,eAAOH,OAAP,GAAiB+E,WAAjB;AACA5E,eAAO6B,IAAP,CAAY,UAACjB,GAAD,EAAMZ,MAAN,EAAiB;AACzB,gBAAIY,GAAJ,EAAS,OAAOa,SAASb,GAAT,CAAP;AACT,mBAAOa,SAAS,IAAT,EAAezB,MAAf,CAAP;AACH,SAHD;AAIH,KA9BL,EA+BKkC,KA/BL,CA+BW,eAAO;AACVT,iBAASb,GAAT;AACH,KAjCL;AAkCH,CAnCM;AAoCP;AACO,IAAMyE,oDAAsB,SAAtBA,mBAAsB,CAAC/F,WAAD,EAAcM,aAAd,EAAgC;AAC/D,QAAIT,WAAW,IAAIF,IAAJ,EAAf;AACAE,aAASiD,QAAT,CAAkBjD,SAASkD,QAAT,KAAsB,CAAxC;AACA,QAAIT,kBAAkB,IAAIzB,cAAJ,CAAmB;AACrCvB,cAAM,oBAD+B;AAErCU,gCAFqC;AAGrCM,oCAHqC;AAIrCT,0BAJqC;AAKrCc,gBAAQ;AAL6B,KAAnB,CAAtB;AAOA,WAAO2B,gBAAgBC,IAAhB,CAAqB,UAACjB,GAAD,EAAMC,IAAN,EAAe;AACvC,YAAID,GAAJ,EAAS;AACL,mBAAQ,6BAAR;AACH;AACD,eAAOC,IAAP;AACH,KALM,CAAP;AAMH,CAhBM;;AAkBA,IAAMyE,0DAAyB,SAAzBA,sBAAyB,CAAC7D,QAAD,EAAc;AAChDtB,mBAAeI,IAAf,CAAoB,EAAEX,eAAe,EAAE0E,SAAS,IAAX,EAAjB,EAAoCjF,SAAS,EAAEiF,SAAS,IAAX,EAA7C,EAApB,EACK7D,QADL,CACc,aADd,EAC6B,EAAE8E,WAAW,CAAb,EAAgBC,UAAU,CAA1B,EAD7B,EAEK/E,QAFL,CAEc,eAFd,EAE+B,EAAEoE,WAAW,CAAb,EAF/B,EAGKrE,MAHL,CAGY,EAAE5B,MAAM,CAAR,EAAWU,aAAa,CAAxB,EAA2BD,SAAS,CAApC,EAAuCY,QAAQ,CAA/C,EAAkDH,OAAO,CAAzD,EAHZ,EAIK8D,IAJL,CAIU,EAAE3D,QAAQ,CAAV,EAAaZ,SAAS,CAAtB,EAAyB4B,KAAK,CAAC,CAA/B,EAJV,EAKKgB,IALL,CAKU,UAACpB,IAAD,EAAU;AACZ,YAAM4E,SAAS5E,KAAK6E,MAAL,CAAY;AAAA,mBACvBC,OAAOC,IAAP,CAAYC,KAAKC,IAAjB,EAAuBC,GAAvB,CAA2B;AAAA,uBACvBF,KAAKG,GAAL,MAAc,IAAd,IAAsBH,KAAKG,GAAL,MAAcC,SAApC,GAAgD,IAAhD,GAAuD,KADhC;AAAA,aAA3B,EAEKP,MAFL,CAEY;AAAA,uBAAQG,SAAS,KAAjB;AAAA,aAFZ,EAEoCrC,MAFpC,KAE+C,CAF/C,GAEmD,IAFnD,GAE0D,KAHnC;AAAA,SAAZ,CAAf;AAIA/B,iBAAS,IAAT,EAAegE,MAAf;AACH,KAXL,EAYKvD,KAZL,CAYW;AAAA,eAAOpB,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AAAA,KAZX;AAaH,CAdM;;AAgBA,IAAMsF,gEAA4B,SAA5BA,yBAA4B,CAACzE,QAAD,EAAc;AACnDtB,mBAAemD,KAAf,CAAqB,EAAErD,QAAQ,KAAV,EAAiBZ,SAAS,EAAEiF,SAAS,IAAX,EAA1B,EAArB,EACKrC,IADL,CACU,UAACqB,KAAD,EAAW;AACb7B,iBAAS,IAAT,EAAe6B,KAAf;AACH,KAHL,EAIKpB,KAJL,CAIW,eAAO;AACVT,iBAASb,GAAT;AACH,KANL;AAOH,CARM;;AAUA,IAAMuF,8EAAmC,SAAnCA,gCAAmC,CAAC/E,EAAD,EAAKK,QAAL,EAAkB;AAC9DX,YAAQC,GAAR,CAAYK,EAAZ;AACAjB,mBAAewC,OAAf,CAAuB,EAAE1B,KAAKG,EAAP,EAAvB,EACKX,QADL,CACc;AACNC,cAAM,eADA;AAENF,gBAAQ;AAFF,KADd,EAKKyB,IALL,CAKU,UAACkB,SAAD,EAAe;AACjB,YAAMiD,eAAejD,UAAUvD,aAA/B;AACA,YAAMyG,iBAAiBD,aAAavB,SAAb,CAAuBa,MAAvB,CAA8B;AAAA,mBAAYT,SAASC,KAArB;AAAA,SAA9B,CAAvB;AACA,YAAMoB,eACFD,eAAeN,GAAf,CAAmB;AAAA,mBACf5C,UAAUtD,OAAV,CAAkB6F,MAAlB,CAAyB;AAAA,uBAAUa,OAAOnF,EAAP,IAAayE,KAAK5E,GAA5B;AAAA,aAAzB,EAA0D,CAA1D,CADe;AAAA,SAAnB,CADJ;AAGA,YAAMJ,OAAO;AACT2F,2BAAeJ,aAAavB,SAAb,CAAuBrB,MAD7B;AAETyB,sBAAUoB,cAFD;AAGTE,oBAAQD,YAHC;AAITxG,mBAAOqD,UAAUrD,KAJR;AAKTG,oBAAQkD,UAAUlD;AALT,SAAb;AAOAwB,iBAAS,IAAT,EAAeZ,IAAf;AACH,KAnBL,EAoBKqB,KApBL,CAoBW,eAAO;AACVT,iBAASb,GAAT;AACH,KAtBL;AAuBH,CAzBM;AA0BP;AACO,IAAM6F,4DAA0B,SAA1BA,uBAA0B,CAACC,MAAD,EAAS5G,KAAT,EAAgB2B,QAAhB,EAA6B;AAChEtB,mBAAewC,OAAf,CAAuB,EAAE1B,KAAKyF,MAAP,EAAvB,EACKzE,IADL,CACU,qBAAa;AACf,YAAI;AACA0E,sBAAU7G,KAAV,IAAmB8G,SAAS9G,KAAT,KAAmB,CAAtC;AACH,SAFD,CAEE,OAAOc,GAAP,EAAY;AACV,mBAAOa,SAASb,GAAT,CAAP;AACH;AACD+F,kBAAU1G,MAAV,GAAmB,IAAnB;AACA0G,kBAAU9E,IAAV,CAAe,UAACjB,GAAD,EAAMC,IAAN,EAAe;AAC1B,gBAAID,GAAJ,EACI,OAAOa,SAASb,GAAT,CAAP;AACJ,mBAAOa,SAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,SAJD;AAKH,KAbL,EAcKqB,KAdL,CAcW,eAAO;AACVT,iBAASb,GAAT;AACH,KAhBL;AAiBH,CAlBM;AAmBP;AACO,IAAMiG,0DAAyB,SAAzBA,sBAAyB,CAAClH,UAAD,EAAgB;AAClD,WAAOQ,eAAee,MAAf,CAAsB,EAAEvB,sBAAF,EAAcK,QAAQ,IAAtB,EAAtB,EAAoD,UAACY,GAAD,EAAMC,IAAN,EAAe;AACtE,YAAID,GAAJ,EAAS;AACL,mBAAQ,2BAAR;AACH,SAFD,MAEO;AACH,mBAAO,CAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM;AASP;AACO,IAAMkG,0DAAyB,SAAzBA,sBAAyB,CAACnH,UAAD,EAAgB;AAClD,WAAOQ,eAAeI,IAAf,CAAoB,EAAEZ,sBAAF,EAApB,EAAoCgB,IAApC,CAAyC,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC3D,YAAID,GAAJ,EAAS;AACL,mBAAQ,mBAAR;AACH,SAFD,MAEO;AACH,mBAAOC,IAAP;AACH;AACJ,KANM,CAAP;AAOH,CARM","file":"entryCode.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport uid from 'uid'\r\n\r\nlet EntryCode = new Schema({\r\n    code: { type: String, required: true },\r\n    createCode: {\r\n        type: Date,\r\n        default: new Date()\r\n    },\r\n    deadline: Date,\r\n    startTime: Date,\r\n    endTime: Date,\r\n    candidateId: {\r\n        type: Schema.Types.String,\r\n        ref: 'Candidate'\r\n    },\r\n    questionIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Question'\r\n    }],\r\n    templateId: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'TestTemplate'\r\n    },\r\n    englishExamId: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'EnglishTest'\r\n    },\r\n    answers: [],\r\n    point: Number,\r\n    result: String,\r\n    status: Boolean\r\n})\r\nconst entryCodeTable = mongoose.model('EntryCode', EntryCode)\r\n\r\n\r\nexport const _getAllEntryCode = () => {\r\n    return entryCodeTable.find({}).\r\n        select({ deadline: 1, createCode: 1, point: 1, code: 1, startTime: 1, endTime: 1, result: 1, questionIds: 1 }).\r\n        populate({\r\n            path: 'candidateId'\r\n        })\r\n        .populate({\r\n            path: 'templateId'\r\n        })\r\n        .populate('englishExamId')\r\n        .populate({\r\n            path: 'questionIds'\r\n        })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                console.log(err);\r\n                return ('Get Entry Code Error !')\r\n            } else {\r\n                return data;\r\n            }\r\n        })\r\n}\r\n//deleteEntryCode\r\nexport const _deleteEntryCode = (_id) => {\r\n    return entryCodeTable.remove({ _id }, (err => {\r\n        if (err) {\r\n            return ('Delete Entry Code Error !')\r\n        } else {\r\n            return 1;\r\n        }\r\n    }))\r\n}\r\nexport const deleteEntryCodeModel = (id) => {\r\n    entryCodeTable.findOneAndRemove({ _id: id }, (err, response) => {\r\n        if (err) return err\r\n    })\r\n}\r\nexport const deleteEntryCodeByUserId = (userId, callback) => {\r\n    return entryCodeTable.remove({ userId }, (err => {\r\n        if (err) return callback(err)\r\n    }))\r\n}\r\n//create Entry Code\r\nexport const _createEntryCode = (dataQuestion, candidateId, templateId, deadline) => {\r\n    let _entryCodeTable = new entryCodeTable({\r\n        code: uid(),\r\n        questionIds: dataQuestion,\r\n        candidateId,\r\n        deadline,\r\n        templateId\r\n    })\r\n    return _entryCodeTable.save((err, data) => {\r\n        if (err) {\r\n            throw ('Create Entry Code Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\nexport const addEntryCode = async (exam, userId, templateId, deadline, callback) => {\r\n    let newEntryCode = new entryCodeTable({\r\n        \"code\": uid(),\r\n        \"questionIds\": exam,\r\n        userId,\r\n        deadline,\r\n        templateId\r\n    });\r\n    await newEntryCode.save((err, data) => {\r\n        if (err) throw err\r\n    }).then(data => {\r\n        return callback(null, data)\r\n    }).catch(err => {\r\n        return callback(err)\r\n    })\r\n}\r\nexport const addEntryCodeEnglish = async (userId, englishExamId, callback) => {\r\n    let deadline = new Date()\r\n    deadline.setMonth(deadline.getMonth() + 1)\r\n    await entryCodeTable.create({\r\n        code: uid(),\r\n        userId,\r\n        englishExamId,\r\n        deadline,\r\n    }, (err, data) => {\r\n        if (err) return callback(err)\r\n        return callback(null, data)\r\n    })\r\n}\r\n\r\nexport const saveEntryCodeEnglishToDB = async (userId, englishExamId) => {\r\n    let deadline = new Date()\r\n    deadline.setMonth(deadline.getMonth() + 1)\r\n    let obj = {\r\n        code: uid(),\r\n        userId,\r\n        englishExamId,\r\n        deadline\r\n    }\r\n    try {\r\n        let result = await entryCodeTable.create(obj)\r\n        return {\r\n            message: true,\r\n            data: result\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            message: false,\r\n            data: error\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const findCode = (code) => {\r\n    return entryCodeTable.findOne({ code })\r\n        .populate('templateId')\r\n        .populate('candidateId')\r\n        .populate('englishExamId')\r\n        .populate('questionIds')\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\nexport const updateEntryCode = (dataInput) => {\r\n    const { conditions, update } = dataInput;\r\n    return entryCodeTable.findOneAndUpdate(conditions, update, { new: true }).\r\n        exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n\r\n}\r\nexport const editEntryCode = async (_id, questionIds, deadline, callback) => {\r\n    let entryCode = await entryCodeTable.findOne({ _id }).select({ point: 1 })\r\n    try {\r\n        await entryCodeTable.findOneAndUpdate({ _id },\r\n            { code: uid(), deadline: deadline, questionIds: questionIds },\r\n            { new: true },\r\n            (err, data) => {\r\n                return callback(null, data)\r\n            })\r\n    } catch (err) {\r\n        return callback(err);\r\n    }\r\n}\r\nexport const endTestModel = (duration, answers, code, callback) => {\r\n    entryCodeTable.findOne({ code })\r\n        .populate('questionIds')\r\n        .populate('templateId')\r\n        .then(result => {\r\n            console.log('answers', answers)\r\n            console.log('answers', result)\r\n            let count = 0;\r\n            for (let i = 0; i < answers.length; i++) {\r\n                for (let j = 0; j < result.questionIds.length; j++) {\r\n                    if (answers[i].id == result.questionIds[j]._id) {\r\n                        let a, b;\r\n                        //sort đáp án mà người dùng chọn rồi convert sang string\r\n                        a = answers[i].answers.sort() + \"\";\r\n                        b = result.questionIds[j].correct.sort() + \"\";\r\n                        if (a === b) {\r\n                            count++;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            /* save data in entry test */\r\n            result.point = count;\r\n            result.result = (((count / result.questionIds.length) * 100) >= result.templateId.passScore ? 'PASS' : 'FAIL')\r\n            if ((Date.parse(result.endTime) - Date.parse(result.startTime)) > duration) result.endTime = new Date();\r\n            result.answers = answers;\r\n            result.save((err, result) => {\r\n                if (err) callback(err)\r\n                callback(null, result);\r\n            })\r\n        })\r\n        .catch(err => {\r\n\r\n            callback(err);\r\n        })\r\n}\r\n/* load data vao page finish test */\r\nexport const finishTestModel = (code, callback) => {\r\n    entryCodeTable.findOne({ code })\r\n        .populate('templateId')\r\n        .populate('candidateId')\r\n        .then(result => {\r\n            const data = {\r\n                \"duration\": Math.ceil((Date.parse(result.endTime) - Date.parse(result.startTime)) / 1000 / 60),\r\n                \"point\": result.point,\r\n                \"totalQuestion\": result.questionIds.length,\r\n                \"result\": result.result\r\n            }\r\n            callback(null, data);\r\n        })\r\n        .catch(err => {\r\n            callback(err);\r\n        })\r\n\r\n}\r\nexport const checkCode = async (templateId, userId, callback) => {\r\n    try {\r\n        await entryCodeTable.findOne({ templateId, userId }, (err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (error) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const getGenByTemplateId = async (templateId, callback) => {\r\n    try {\r\n        await entryCodeTable.find({ templateId }).exec((err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const _updateGenByTemplateId = (templateId) => {\r\n    return entryCodeTable.update({ templateId, result: { $exists: true } }, { templateId: null }, { multi: true }, err => {\r\n        if (err) {\r\n            throw ('Update Data Entry Error !')\r\n        }\r\n    })\r\n}\r\n//get detail test of candidate => view result question which candidate choosed\r\nexport const detailResultTest = async (code, callback) => {\r\n    try {\r\n        await entryCodeTable.findOne({ code })\r\n            .populate('questionIds')\r\n            .populate('englishExamId')\r\n            .then(data => {\r\n                // console.log(data)\r\n                callback(data, null);\r\n            })\r\n            .catch(err => {\r\n                callback(null, { status: 500, message: err });\r\n            })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n\r\n}\r\n//regenerate\r\nexport const _regenerate = (_id, dataQuestion, deadline) => {\r\n    return entryCodeTable.findOneAndUpdate({ _id }, {\r\n        code: uid(),\r\n        deadline: deadline,\r\n        questionIds: dataQuestion\r\n    }, { new: true }).exec((err, data) => {\r\n        if (err) {\r\n            return ('Update Entry Code Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\n//delete Entry Code By CandidateId\r\nexport const _deleteEntryCodeByCandi = (candidateId) => {\r\n    return entryCodeTable.remove({ candidateId }, (err => {\r\n        if (err) {\r\n            return ('Delete EntryCode Error !')\r\n        } else {\r\n            return 1;\r\n        }\r\n    }))\r\n}\r\n\r\n//calculator point when end english test\r\nexport const endEnglishTestModel = (duration, list_answer, code, callback) => {\r\n    entryCodeTable.findOne({ code: code })\r\n        .populate('englishExamId')\r\n        .then((result) => {\r\n            let { questions } = result.englishExamId;\r\n            questions.pop();\r\n            result.questionIds = questions;\r\n            let point = 0;\r\n            list_answer.forEach(function (answerElement) {\r\n                questions.forEach(function (question) {\r\n                    if (question.essay) {\r\n                        return;\r\n                    }\r\n                    if (answerElement.id == question._id) {\r\n                        let correct_answer, option_answer;\r\n                        correct_answer = question.correct.sort() + \"\";\r\n                        option_answer = answerElement.answers.sort() + \"\";\r\n                        if (correct_answer === option_answer) {\r\n                            point++;\r\n                        }\r\n                        return;\r\n                    }\r\n                })\r\n            });\r\n            result.point = point;\r\n            if ((Date.parse(result.endTime) - Date.parse(result.startTime)) > duration) result.endTime = new Date();\r\n            result.answers = list_answer;\r\n            result.save((err, result) => {\r\n                if (err) return callback(err)\r\n                return callback(null, result);\r\n            })\r\n        })\r\n        .catch(err => {\r\n            callback(err);\r\n        })\r\n}\r\n//create Entry English Test \r\nexport const _createEntryEnglish = (candidateId, englishExamId) => {\r\n    let deadline = new Date()\r\n    deadline.setMonth(deadline.getMonth() + 1)\r\n    let _entryCodeTable = new entryCodeTable({\r\n        code: uid(),\r\n        candidateId,\r\n        englishExamId,\r\n        deadline,\r\n        status: false\r\n    })\r\n    return _entryCodeTable.save((err, data) => {\r\n        if (err) {\r\n            return ('Create Entry English Error!')\r\n        }\r\n        return data\r\n    })\r\n}\r\n\r\nexport const getAllEnglishTestModel = (callback) => {\r\n    entryCodeTable.find({ englishExamId: { $exists: true }, endTime: { $exists: true } })\r\n        .populate(\"candidateId\", { firstName: 1, lastName: 1 })\r\n        .populate(\"englishExamId\", { questions: 1 })\r\n        .select({ code: 1, candidateId: 1, endTime: 1, status: 1, point: 1 })\r\n        .sort({ status: 1, endTime: 1, _id: -1 })\r\n        .then((data) => {\r\n            const dataRs = data.filter(item =>\r\n                Object.keys(item._doc).map(key =>\r\n                    item[key] !== null && item[key] !== undefined ? true : false)\r\n                    .filter(item => item === false).length === 0 ? true : false);\r\n            callback(null, dataRs)\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const countEnglishNotPointModel = (callback) => {\r\n    entryCodeTable.count({ status: false, endTime: { $exists: true } })\r\n        .then((count) => {\r\n            callback(null, count)\r\n        })\r\n        .catch(err => {\r\n            callback(err)\r\n        });\r\n}\r\n\r\nexport const getQuestionEssayEnglishTestModel = (id, callback) => {\r\n    console.log(id)\r\n    entryCodeTable.findOne({ _id: id })\r\n        .populate({\r\n            path: \"englishExamId\",\r\n            select: \"questions\"\r\n        })\r\n        .then((entryCode) => {\r\n            const english_exam = entryCode.englishExamId;\r\n            const question_essay = english_exam.questions.filter(question => question.essay);\r\n            const answer_essay =\r\n                question_essay.map(item =>\r\n                    entryCode.answers.filter(answer => answer.id == item._id)[0]);\r\n            const data = {\r\n                totalQuestion: english_exam.questions.length,\r\n                question: question_essay,\r\n                answer: answer_essay,\r\n                point: entryCode.point,\r\n                status: entryCode.status\r\n            }\r\n            callback(null, data)\r\n        })\r\n        .catch(err => {\r\n            callback(err);\r\n        })\r\n}\r\n//save point into exam\r\nexport const savePointEssayToDbModel = (idExam, point, callback) => {\r\n    entryCodeTable.findOne({ _id: idExam })\r\n        .then(entryTest => {\r\n            try {\r\n                entryTest.point += parseInt(point) || 0;\r\n            } catch (err) {\r\n                return callback(err)\r\n            }\r\n            entryTest.status = true;\r\n            entryTest.save((err, data) => {\r\n                if (err)\r\n                    return callback(err)\r\n                return callback(null, data)\r\n            });\r\n        })\r\n        .catch(err => {\r\n            callback(err);\r\n        })\r\n}\r\n//delete Entry by Template Id and sate\r\nexport const _deleteEntryByTemplate = (templateId) => {\r\n    return entryCodeTable.remove({ templateId, result: null }, (err, data) => {\r\n        if (err) {\r\n            return ('Delete Entry Code Error !')\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n}\r\n//get Entry by templateid\r\nexport const _getAllEntryByTemplate = (templateId) => {\r\n    return entryCodeTable.find({ templateId }).exec((err, data) => {\r\n        if (err) {\r\n            return ('Get Entry Error !')\r\n        } else {\r\n            return data;\r\n        }\r\n    })\r\n}\r\n\r\n"]}