{"version":3,"sources":["../../src/models/post.js"],"names":["Post","Schema","urlImage","String","title","content","description","category","status","type","Boolean","default","link_url","unique","require","create_at","Date","now","update_at","urlImageSlider","hashTag","postModel","mongoose","model","createPost","newPost","callback","save","data","listPost","order","limit","find","sort","deletePost","id","remove","_id","searchSuggest","valueSearch","$or","RegExp","$ne","editPost","findById","doc","listDelete","listHashTag","split","deleteImage","listImageSlider","i","filter","item","post","link","console","log","fs","unlinkSync","err","getPostById","getAllPostActive"],"mappings":"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","file":"post.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport multer from \"multer\";\r\nimport fs from \"fs\";\r\n\r\nconst Post = new Schema({\r\n    urlImage: String,\r\n    title: String,\r\n    content: String,\r\n    description: String,\r\n    category: String,\r\n    status: { type: Boolean, default: false },\r\n    link_url: { type: String, unique: true, require: true },\r\n    create_at: { type: Date, default: Date.now },\r\n    update_at: { type: Date, default: Date.now },\r\n    urlImageSlider: [{\r\n        type: String\r\n    }],\r\n    hashTag: [{\r\n        type: String\r\n    }],\r\n})\r\n\r\nlet postModel = mongoose.model('post', Post);\r\n\r\nexport const createPost = async (newPost, callback) => {\r\n    let Post = new postModel(newPost);\r\n    try {\r\n        const data = await Post.save();\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const listPost = async (order, limit, callback) => {\r\n    try {\r\n        let data = await postModel.find(order).sort({ 'update_at': -1 });\r\n        if (!limit) data = await postModel.find(order).sort({ 'update_at': -1 }).limit(limit);\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\n\r\nexport const deletePost = async (id, callback) => {\r\n    try {\r\n        const data = await postModel.remove({ _id: id });\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const searchSuggest = async (valueSearch, callback) => {\r\n    try {\r\n        const data = await postModel\r\n            .find(\r\n            {\r\n                $or: [\r\n                    { title: { '$regex': new RegExp(valueSearch, 'i') } },\r\n                    { description: { '$regex': new RegExp(valueSearch, 'i') } },\r\n                    { category: { '$regex': new RegExp(valueSearch, 'i') } }\r\n                ]\r\n                , category: { $ne: 'Page' }\r\n            });\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const editPost = async (id, data, callback) => {\r\n    try {\r\n        let doc = await postModel.findById({ _id: id });\r\n        const { title, description, status, urlImageSlider,\r\n            urlImage, content, hashTag, category, listDelete } = data;\r\n        doc.title = title;\r\n        doc.description = description;\r\n        doc.status = status;\r\n        doc.update_at = new Date();\r\n        doc.content = content;\r\n        doc.category = category;\r\n        const listHashTag = hashTag.split(',');\r\n        doc.hashTag = listHashTag[0] !== '' ? listHashTag : [];\r\n        if (urlImage) {\r\n            deleteImage(doc.urlImage);\r\n            doc.urlImage = urlImage;\r\n        }\r\n        let listImageSlider = [...doc.urlImageSlider, ...urlImageSlider];\r\n        for (let i of listDelete.split(',')) {\r\n            deleteImage(i);\r\n            listImageSlider = listImageSlider.filter(item => item !== i);\r\n        }\r\n        doc.urlImageSlider = listImageSlider;\r\n        const post = await doc.save();\r\n        callback(null, post);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nconst deleteImage = urlImage => {\r\n    if (urlImage) {\r\n        try {\r\n            const link = `upload/${urlImage}`;\r\n            console.log('xoa anh', urlImage)\r\n            fs.unlinkSync(link);\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport const getPostById = async (id, callback) => {\r\n    try {\r\n        const doc = await postModel.findById({ _id: id });\r\n        callback(null, doc);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const getAllPostActive = async (limit, callback) => {\r\n    try {\r\n        let data = await postModel.find({ status: true }).sort({ 'update_at': -1 }).limit(limit);;\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err)\r\n    }\r\n}"]}