{"version":3,"sources":["../../src/models/question.js"],"names":["QuestionSchema","Schema","type","String","default","language","required","course","section","multi","Boolean","level","Number","min","max","question","options","a","b","c","d","correct","pre","next","undefined","plugin","random","path","questionTable","mongoose","model","importToDb","data","callback","split","console","log","_table","essay","testCode","partNumber","partTitle","save","err","datas","Error","questionsRamdom","number","Promise","resolve","reject","findRandom","_id","limit","questions","_questionsRamdom","getAllQuestion","find","exec","getQuestionByCouse","getQuestionBy_Id","findOne","add_question","newQuestion","Question","edit_question","findOneAndUpdate","_data","delete_question","findOneAndRemove","getQuizModel"],"mappings":"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","file":"question.js","sourcesContent":["import mongoose, { Schema, Error } from 'mongoose';\r\nimport random from 'mongoose-random';\r\n\r\nlet QuestionSchema = new Schema({\r\n    type: {\r\n        type: String,\r\n        default: \"Entry Test\",\r\n    },\r\n    language: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    course: String,\r\n    section: String,\r\n    multi: { type: Boolean, default: false },\r\n    level: { type: Number, min: 0, max: 3 }, //1 easy, 2.medium, 3.hard\r\n    question: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    options: {\r\n        a: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        b: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        c: String,\r\n        d: String\r\n    },\r\n    correct: []\r\n})\r\nQuestionSchema.pre('save', function (next) {\r\n    if (!this.options.d) {\r\n        this.options.d = undefined;\r\n    }\r\n    next();\r\n})\r\n\r\nQuestionSchema.plugin(random, { path: 'r' })\r\nconst questionTable = mongoose.model('Question', QuestionSchema)\r\n\r\nexport const importToDb = async (data, callback) => {\r\n    try {\r\n        if (data.multi && data.question && data.type) {\r\n            data.correct = data.correct.split(\",\")\r\n            console.log('data-question', data)\r\n            let options = data[\"options[d]\"] ? \r\n                            {a: data[\"options[a]\"], b: data[\"options[b]\"], c: data[\"options[c]\"], d: data[\"options[d]\"]}                            \r\n                            : {a: data[\"options[a]\"], b: data[\"options[b]\"], c: data[\"options[c]\"]}\r\n            let _table = new questionTable({\r\n                type: data.type,\r\n                language: data.language,\r\n                course: data.course,\r\n                section: data.section,\r\n                question: data.question,\r\n                multi: (data.multi === 'TRUE' ? true : false),\r\n                level: data.level,\r\n                correct: data.correct,\r\n                options: options,\r\n                essay: (data.essay === 'TRUE' ? true : false),\r\n                testCode: data.testCode,\r\n                partNumber: data.partNumber,\r\n                partTitle: data.partTitle\r\n            })\r\n            await _table.save((err, datas) => {\r\n                return callback(null, datas)\r\n            })\r\n        } else {\r\n            throw new Error('Error!')\r\n        }\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const questionsRamdom = (language, type, level, number) => {\r\n    if (number === 0) {\r\n        return []\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        questionTable.findRandom(\r\n            { language: language, type: type, level: level },\r\n            { _id: 1 },\r\n            { limit: number },\r\n            (err, questions) => {\r\n                if (err) throw reject(err)\r\n                resolve(questions)\r\n            }\r\n        )\r\n    })\r\n}\r\n//question random\r\nexport const _questionsRamdom = (language, level, number) => {\r\n    if (number === 0) {\r\n        return [];\r\n    } else {\r\n        return questionTable.findRandom(\r\n            { language: language, type: 'Entry Test', level: level },\r\n            { _id: 1 },\r\n            { limit: number },\r\n            (err, data) => {\r\n                if (err) {\r\n                    return (`Get Data Question Error`)\r\n                } else {\r\n                    return data\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\nexport const getAllQuestion = async (callback) => {\r\n    try {\r\n        await questionTable.find({}).exec((err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const getQuestionByCouse = async (language, type, callback) => {\r\n    try {\r\n        await questionTable.find({ language, type }).exec((err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const getQuestionBy_Id = async (_id, callback) => {\r\n    try {\r\n        await questionTable.findOne({ _id }).exec((err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const add_question = async (newQuestion, callback) => {\r\n\r\n    let Question = new questionTable(newQuestion);\r\n    try {\r\n        const data = await Question.save();\r\n        callback(null, data);\r\n    } catch (err) {\r\n        callback(err);\r\n    }\r\n}\r\nexport const edit_question = async (_id, data, callback) => {\r\n    if (!data.options.c) {\r\n        data.options.c = undefined;\r\n    }\r\n    if (!data.options.d) {\r\n        data.options.d = undefined;\r\n    }\r\n    try {\r\n        await questionTable.findOneAndUpdate({ _id }, {\r\n            type: data.type,\r\n            language: data.language,\r\n            question: data.question,\r\n            multi: data.multi,\r\n            course: data.course,\r\n            section: data.section,\r\n            level: data.level,\r\n            options: {\r\n                a: data.options.a,\r\n                b: data.options.b,\r\n                c: data.options.c,\r\n                d: data.options.d\r\n            },\r\n            correct: data.correct\r\n        }).exec((err, _data) => {\r\n            return callback(null, _data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\nexport const delete_question = async (_id, callback) => {\r\n    try {\r\n        await questionTable.findOneAndRemove({ _id }, (err, data) => {\r\n            return callback(null, data)\r\n        })\r\n    } catch (err) {\r\n        return callback(err)\r\n    }\r\n}\r\n\r\nexport const getQuizModel = async (language, course, section, limit, callback) => {\r\n    try {\r\n        const questions = await questionTable.find({ type: \"Quiz\", language, course, section });\r\n        return callback(null, questions);\r\n    } catch (err) {\r\n        return callback(err);\r\n    }\r\n}\r\n"]}