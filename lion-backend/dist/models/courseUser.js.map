{"version":3,"sources":["../../src/models/courseUser.js"],"names":["courseUser","Schema","userId","type","Types","ObjectId","ref","courseId","_id","sectionIds","lectureIds","id","result","Boolean","default","couresUserTable","mongoose","model","courseUserModel","callback","findOne","populate","exec","err","data","console","log","importcourseUserModel","dataCourse","idLecture","sections","map","v","lectures","JSON","stringify","val","_couresUserTable","save","_data","listCourse","find","getCourseUserById","Id","getCourseUserByUserName","updateCourseUser","idCourse","update","new"],"mappings":"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","file":"courseUser.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nlet courseUser = new Schema({\r\n    userId: { type: Schema.Types.ObjectId, ref: 'User' },\r\n    courseId: {\r\n        _id: { type: Schema.Types.ObjectId, ref: 'Course' },\r\n        sectionIds: [{\r\n            _id: { type: Schema.Types.ObjectId, ref: 'Course.sections' },\r\n            lectureIds: [{\r\n                id: { type: Schema.Types.ObjectId, ref: 'Course.sections.lectures' },\r\n                result: { type: Boolean, default: false }\r\n            }]\r\n        }]\r\n    }\r\n})\r\nconst couresUserTable = mongoose.model('CourseUser', courseUser)\r\n\r\nexport const courseUserModel = async (callback) => {\r\n    try {\r\n        await couresUserTable.findOne({ \"_id\": \"5a7d1489602eb12260e8b733\" }).\r\n            populate('courseId._id').\r\n            populate('userId').\r\n            exec((err, data) => {\r\n                return callback(null, data)\r\n            })\r\n    } catch (err) {\r\n        console.log(err)\r\n        return callback(err)\r\n    }\r\n}\r\nexport const importcourseUserModel = async (userId, dataCourse, idLecture) => {\r\n    try {\r\n        let data = {\r\n            userId: userId,\r\n            courseId: {\r\n                _id: dataCourse._id,\r\n                sectionIds: dataCourse.sections.map(v => {\r\n                    return {\r\n                        _id: v._id,\r\n                        lectureIds: v.lectures.map(val => {\r\n                            if (JSON.stringify(val._id) === JSON.stringify(idLecture)) {\r\n                                return {\r\n                                    _id: val._id,\r\n                                    result: true,\r\n                                }\r\n                            } else {\r\n                                return {\r\n                                    _id: val._id,\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        let _couresUserTable = new couresUserTable(data)\r\n        await _couresUserTable.save((err, _data) => {\r\n            return _data\r\n        })\r\n    } catch (err) {\r\n        return err\r\n    }\r\n}\r\nexport const listCourse = (userId) => {\r\n    return couresUserTable.find({ userId }).\r\n        populate('courseId._id').\r\n        populate('userId').\r\n        exec((err, data) => {\r\n            if (err) return err;\r\n            return data\r\n        })\r\n}\r\nexport const getCourseUserById = (Id) => {\r\n    return couresUserTable.findOne({ \"courseId._id\": Id }).\r\n        populate('courseId._id').\r\n        populate('userId').\r\n        exec((err, data) => {\r\n            if (err) return err;\r\n            return data\r\n        })\r\n\r\n}\r\nexport const getCourseUserByUserName = (userId, courseId) => {\r\n    return couresUserTable.findOne({ userId, \"courseId._id\": courseId }).\r\n        exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\nexport const updateCourseUser = async (dataCourse, userId, idCourse, idLecture, result) => {\r\n    let data = {\r\n        courseId: {\r\n            _id: dataCourse.courseId._id,\r\n            sectionIds: dataCourse.courseId.sectionIds.map(v => {\r\n                return {\r\n                    _id: v._id,\r\n                    lectureIds: v.lectureIds.map(val => {\r\n                        if (JSON.stringify(val._id) === JSON.stringify(idLecture)) {\r\n                            return {\r\n                                _id: val._id,\r\n                                result: (typeof (result) == \"boolean\") ? result : true,\r\n                            }\r\n                        } else {\r\n                            return {\r\n                                _id: val._id,\r\n                                result: val.result,\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    try {\r\n        await couresUserTable.update(\r\n            { userId, \"courseId._id\": idCourse },\r\n            data,\r\n            { new: true },\r\n            (err, data) => {\r\n                return data\r\n            }\r\n        )\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n}"]}