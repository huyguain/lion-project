{"version":3,"sources":["../../src/models/finalTest.js"],"names":["FinalTest","Schema","fresherId","type","Types","ObjectId","ref","templateId","questionIds","answers","Array","point","Number","result","String","timeOpen","Date","timeClose","startTime","endTime","finalTable","mongoose","model","createFinalTest","dataQuestion","finalTest","save","err","data","getAllFinalTest","dataSearch","find","populate","exec","getLastFinalTest","findOne","sort","editFinalTest","_id","dataUpdate","findOneAndUpdate","new","deleteFinalTest","dataDelete","remove"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,YAAY,IAAIC,gBAAJ,CAAW;AACzBC,eAAW;AACPC,cAAMF,iBAAOG,KAAP,CAAaC,QADZ;AAEPC,aAAK;AAFE,KADc;AAKzBC,gBAAY;AACRJ,cAAMF,iBAAOG,KAAP,CAAaC,QADX;AAERC,aAAK;AAFG,KALa;AASzBE,iBAAa,CAAC;AACVL,cAAMF,iBAAOG,KAAP,CAAaC,QADT;AAEVC,aAAK;AAFK,KAAD,CATY;AAazBG,aAASC,KAbgB;AAczBC,WAAOC,MAdkB;AAezBC,YAAQC,MAfiB;AAgBzBC,cAAUC,IAhBe;AAiBzBC,eAAWD,IAjBc;AAkBzBE,eAAWF,IAlBc;AAmBzBG,aAASH;AAnBgB,CAAX,CAAlB;;AAsBA,IAAMI,aAAaC,mBAASC,KAAT,CAAe,WAAf,EAA4BtB,SAA5B,CAAnB;;AAEO,IAAMuB,4CAAkB,SAAlBA,eAAkB,CAACrB,SAAD,EAAYK,UAAZ,EAC3BiB,YAD2B,EACbT,QADa,EACHE,SADG,EACW;AACtC,QAAIQ,YAAY,IAAIL,UAAJ,CAAe;AAC3BZ,qBAAagB,YADc;AAE3BjB,8BAF2B,EAEfL,oBAFe;AAG3Ba,0BAH2B,EAGjBE;AAHiB,KAAf,CAAhB;AAKA,WAAOQ,UAAUC,IAAV,CAAe,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjC,YAAID,GAAJ,EAAS;AACL,kBAAO,2BAAP;AACH,SAFD,MAEO;AACH,mBAAOC,IAAP;AACH;AACJ,KANM,CAAP;AAOH,CAdM;;AAgBA,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AAC3C,WAAOV,WAAWW,IAAX,CAAgBD,UAAhB,EACFE,QADE,CACO,WADP,EAEFA,QAFE,CAEO,YAFP,EAGFA,QAHE,CAGO,aAHP,EAIFC,IAJE,CAIG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KAPE,CAAP;AAQH,CATM;;AAWA,IAAMM,8CAAmB,SAAnBA,gBAAmB,CAACJ,UAAD,EAAgB;AAC5C,WAAOV,WAAWe,OAAX,CAAmBL,UAAnB,EAA+B,EAAEM,MAAM,EAAE,OAAO,CAAC,CAAV,EAAR,EAA/B,EACFJ,QADE,CACO,WADP,EAEFA,QAFE,CAEO,YAFP,EAGFA,QAHE,CAGO,aAHP,EAIFC,IAJE,CAIG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KAPE,CAAP;AAQH,CATM;;AAWA,IAAMS,wCAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,UAAN,EAAqB;AAC9C,WAAOnB,WAAWoB,gBAAX,CAA4B,EAAEF,QAAF,EAA5B,EACHC,UADG,EAEH,EAAEE,KAAK,IAAP,EAFG,EAGLR,IAHK,CAGA,UAACN,GAAD,EAAMC,IAAN,EAAe;AAClB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KANM,CAAP;AAOH,CARM;;AAUA,IAAMc,4CAAkB,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AAC3C,WAAOvB,WAAWwB,MAAX,CAAkBD,UAAlB,EACFV,IADE,CACG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KAJE,CAAP;AAKH,CANM","file":"finalTest.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nconst FinalTest = new Schema({\r\n    fresherId: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Fresher'\r\n    },\r\n    templateId: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'TestTemplate'\r\n    },\r\n    questionIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Question'\r\n    }],\r\n    answers: Array,\r\n    point: Number,\r\n    result: String,\r\n    timeOpen: Date,\r\n    timeClose: Date,\r\n    startTime: Date,\r\n    endTime: Date,\r\n})\r\n\r\nconst finalTable = mongoose.model('FinalTest', FinalTest);\r\n\r\nexport const createFinalTest = (fresherId, templateId,\r\n    dataQuestion, timeOpen, timeClose) => {\r\n    let finalTest = new finalTable({\r\n        questionIds: dataQuestion,\r\n        templateId, fresherId,\r\n        timeOpen, timeClose\r\n    });\r\n    return finalTest.save((err, data) => {\r\n        if (err) {\r\n            throw ('Create Final Test Error !')\r\n        } else {\r\n            return data;\r\n        }\r\n    })\r\n}\r\n\r\nexport const getAllFinalTest = (dataSearch) => {\r\n    return finalTable.find(dataSearch)\r\n        .populate('fresherId')\r\n        .populate('templateId')\r\n        .populate('questionIds')\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const getLastFinalTest = (dataSearch) => {\r\n    return finalTable.findOne(dataSearch, { sort: { '_id': -1 } })\r\n        .populate('fresherId')\r\n        .populate('templateId')\r\n        .populate('questionIds')\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const editFinalTest = (_id, dataUpdate) => {\r\n    return finalTable.findOneAndUpdate({ _id },\r\n        dataUpdate,\r\n        { new: true }\r\n    ).exec((err, data) => {\r\n        if (err) return err;\r\n        return data;\r\n    })\r\n}\r\n\r\nexport const deleteFinalTest = (dataDelete) => {\r\n    return finalTable.remove(dataDelete)\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}"]}