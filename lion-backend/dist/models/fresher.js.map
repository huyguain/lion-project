{"version":3,"sources":["../../src/models/fresher.js"],"names":["Fresher","Schema","firstName","String","lastName","email","type","unique","mobile","Number","language","program","note","startDate","Date","finalIds","Types","ObjectId","ref","university","token","fresherTable","mongoose","model","_SignInFresher","userName","passWord","findOne","exec","err","fresher","generateTokenUser","_id","save","_createCampuslink","dataCampuslink","_fresherTable","data","_getCampuslinkByUserName","_getAllFresher","find","select","_deleteFresherById","remove","_getFresherById","_editFresherById","dataFresher","findOneAndUpdate","new","_getFresherForClass"],"mappings":"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","file":"fresher.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport md5 from 'md5'\r\n\r\nconst Fresher = new Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    email: { type: String, unique: true },\r\n    mobile: Number,\r\n    language: String,\r\n    program: String,\r\n    note: String,\r\n    startDate: Date,\r\n    finalIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Final'\r\n    }],\r\n    university: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'University'\r\n    },\r\n    token: String\r\n})\r\nconst fresherTable = mongoose.model('Fresher', Fresher);\r\n//\r\nexport const _SignInFresher = (userName, passWord) => {\r\n    return fresherTable.findOne({ userName, passWord: md5(passWord) })\r\n        .exec((err, fresher) => {\r\n            if (err) {\r\n                return (\"Username or password is not exitst\");\r\n            } else if (fresher) {\r\n                let token = generateTokenUser(userName, fresher.program, fresher._id);\r\n                fresher.token = token;\r\n                fresher.save();\r\n                return fresher\r\n            } else {\r\n                return (\"System error in Authentication\")\r\n            }\r\n        })\r\n}\r\n//createCampuslink\r\nexport const _createCampuslink = (dataCampuslink) => {\r\n    let _fresherTable = new fresherTable({\r\n        firstName: dataCampuslink.firstName,\r\n        lastName: dataCampuslink.lastName,\r\n        email: dataCampuslink.email,\r\n        mobile: dataCampuslink.mobile,\r\n        language: dataCampuslink.language,\r\n        program: 'Campuslink',\r\n        note: dataCampuslink.note,\r\n        startDate: dataCampuslink.startDate,\r\n        university: dataCampuslink.university,\r\n    })\r\n    return _fresherTable.save((err, data) => {\r\n        if (err) {\r\n            return ('Create Campuslink Error !')\r\n        } else {\r\n            return data;\r\n        }\r\n    })\r\n}\r\n//getCampuslinkByUserName\r\nexport const _getCampuslinkByUserName = (userName) => {\r\n    return fresherTable.findOne({ userName })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Campus Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}\r\n//getAllFresher\r\nexport const _getAllFresher = () => {\r\n    return fresherTable.find({})\r\n        .select({\r\n            firstName: 1, lastName: 1, email: 1, mobile: 1, language: 1,\r\n            program: 1, note: 1, startDate: 1, university: 1\r\n        })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Fresher Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}\r\n//deleteFresherById\r\nexport const _deleteFresherById = (_id) => {\r\n    return fresherTable.remove({ _id }, err => {\r\n        if (err) {\r\n            return (`Delete Frehser Error !`)\r\n        } else {\r\n            return 1\r\n        }\r\n    })\r\n}\r\n//getFresherById\r\nexport const _getFresherById = (_id) => {\r\n    return fresherTable.findOne({ _id })\r\n        .select({\r\n            firstName: 1, lastName: 1, email: 1, mobile: 1, language: 1,\r\n            program: 1, note: 1, startDate: 1, university: 1\r\n        })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return (`Get Fresher Error!`)\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}\r\n//editFresherById\r\nexport const _editFresherById = (_id, dataFresher) => {\r\n    return fresherTable.findOneAndUpdate({ _id }, {\r\n        firstName: dataFresher.firstName,\r\n        lastName: dataFresher.lastName,\r\n        mobile: dataFresher.mobile,\r\n        language: dataFresher.language,\r\n        note: dataFresher.note,\r\n        startDate: dataFresher.startDate,\r\n        university: dataFresher.university,\r\n    }, { new: true }).exec((err, data) => {\r\n        if (err) {\r\n            return ('Update Frehser Error !')\r\n        } else {\r\n            return data\r\n        }\r\n    })\r\n}\r\n//getFresherForClass \r\nexport const _getFresherForClass = () => {\r\n    return fresherTable.find({})\r\n        .select({ email: 1 })\r\n        .exec((err, data) => {\r\n            if (err) {\r\n                return ('Get Data Fresher Error !')\r\n            } else {\r\n                return data\r\n            }\r\n        })\r\n}"]}