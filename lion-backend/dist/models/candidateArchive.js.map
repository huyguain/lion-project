{"version":3,"sources":["../../src/models/candidateArchive.js"],"names":["CandidateArchive","Schema","firstName","String","lastName","email","university","note","state","entryCodeIds","type","Types","ObjectId","ref","mobile","Number","candidateArchiveTable","mongoose","model","createCandidateArchive","dataCreate","save","err","data","getCandidate","dataSearch","find","populate","exec","updateCandidate","_id","dataUpdate","findOneAndUpdate","new","removeCandidate","dataRemove","remove"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,mBAAmB,IAAIC,gBAAJ,CAAW;AAChCC,eAAWC,MADqB;AAEhCC,cAAUD,MAFsB;AAGhCE,WAAOF,MAHyB;AAIhCG,gBAAYH,MAJoB;AAKhCI,UAAMJ,MAL0B;AAMhCK,WAAOL,MANyB;AAOhCM,kBAAc,CAAC;AACXC,cAAMT,iBAAOU,KAAP,CAAaC,QADR;AAEXC,aAAK;AAFM,KAAD,CAPkB;AAWhCC,YAAQC;AAXwB,CAAX,CAAzB;AAaA,IAAMC,wBAAwBC,mBAASC,KAAT,CAAe,kBAAf,EAAmClB,gBAAnC,CAA9B;;AAEO,IAAMmB,0DAAyB,SAAzBA,sBAAyB,CAACC,UAAD,EAAgB;AAClD,QAAIpB,mBAAmB,IAAIgB,qBAAJ,CAA0BI,UAA1B,CAAvB;AACA,WAAOpB,iBAAiBqB,IAAjB,CAAsB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACxC,YAAID,GAAJ,EAAS,MAAO,eAAP;AACT,eAAOC,IAAP;AACH,KAHM,CAAP;AAIH,CANM;;AAQA,IAAMC,sCAAe,SAAfA,YAAe,CAACC,UAAD,EAAgB;AACxC,WAAOT,sBACFU,IADE,CACGD,UADH,EAEFE,QAFE,CAEO,cAFP,EAGFC,IAHE,CAGG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KANE,CAAP;AAOH,CARM;;AAUA,IAAMM,4CAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,UAAN,EAAqB;AAChD,WAAOf,sBACFgB,gBADE,CACe,EAAEF,QAAF,EADf,EAEHC,UAFG,EAGH,EAAEE,KAAK,IAAP,EAHG,EAIDL,IAJC,CAII,UAACN,GAAD,EAAMC,IAAN,EAAe;AAClB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KAPE,CAAP;AAQH,CATM;;AAWA,IAAMW,4CAAkB,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AAC3C,WAAOnB,sBACFoB,MADE,CACKD,UADL,EAEFP,IAFE,CAEG,UAACN,GAAD,EAAMC,IAAN,EAAe;AACjB,YAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,eAAOC,IAAP;AACH,KALE,CAAP;AAMH,CAPM","file":"candidateArchive.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nconst CandidateArchive = new Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    email: String,\r\n    university: String,\r\n    note: String,\r\n    state: String,\r\n    entryCodeIds: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'EntryCode',\r\n    }],\r\n    mobile: Number\r\n})\r\nconst candidateArchiveTable = mongoose.model('CandidateArchive', CandidateArchive);\r\n\r\nexport const createCandidateArchive = (dataCreate) => {\r\n    let CandidateArchive = new candidateArchiveTable(dataCreate);\r\n    return CandidateArchive.save((err, data) => {\r\n        if (err) throw ('Create Errors');\r\n        return data;\r\n    })\r\n}\r\n\r\nexport const getCandidate = (dataSearch) => {\r\n    return candidateArchiveTable\r\n        .find(dataSearch)\r\n        .populate('entryCodeIds')\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const updateCandidate = (_id, dataUpdate) => {\r\n    return candidateArchiveTable\r\n        .findOneAndUpdate({ _id },\r\n        dataUpdate,\r\n        { new: true }\r\n        ).exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}\r\n\r\nexport const removeCandidate = (dataRemove) => {\r\n    return candidateArchiveTable\r\n        .remove(dataRemove)\r\n        .exec((err, data) => {\r\n            if (err) return err;\r\n            return data;\r\n        })\r\n}"]}