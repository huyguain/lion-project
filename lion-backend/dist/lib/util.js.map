{"version":3,"sources":["../../src/lib/util.js"],"names":["generateToken","code","jwt","sign","config","secret","verifyToken","token","callback","verify","err","decoded","generateTokenUser","username","role","userId","expiresIn","validateUserInfo","info","userName","passWord","length"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AACnC,WAAOC,uBAAIC,IAAJ,CAAS,EAAEF,UAAF,EAAT,EAAmBG,iBAAOC,MAA1B,CAAP;AACH,CAFM;AAGP;AACO,IAAMC,oCAAc,SAAdA,WAAc,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC5CN,2BAAIO,MAAJ,CAAWF,KAAX,EAAkBH,iBAAOC,MAAzB,EAAiC,UAACK,GAAD,EAAMC,OAAN,EAAkB;AAC/C,YAAID,GAAJ,EAAS;AACLF,qBAASE,GAAT;AACH;AACD,eAAOF,SAAS,IAAT,EAAeG,OAAf,CAAP;AACH,KALD;AAMH,CAPM;;AASA,IAAMC,gDAAoB,SAApBA,iBAAoB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,MAAjB,EAA4B;AACzD,WAAOb,uBAAIC,IAAJ,CAAS,EAAEU,kBAAF,EAAYC,UAAZ,EAAkBC,cAAlB,EAAT,EAAqCX,iBAAOC,MAA5C,EAAoD,EAAEW,WAAW,KAAb,EAApD,CAAP;AACH,CAFM;AAGP;AACO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACtC,QAAG,CAACA,IAAJ,EAAU;AACN,eAAO,2BAAP;AACH;AAHqC,QAI/BC,QAJ+B,GAIRD,IAJQ,CAI/BC,QAJ+B;AAAA,QAIrBC,QAJqB,GAIRF,IAJQ,CAIrBE,QAJqB;;AAKtC,QAAG,CAACD,QAAD,IAAa,CAACC,QAAjB,EAA2B;AACvB,YAAG,CAACD,QAAJ,EAAc;AACV,mBAAO,oBAAP;AACH;AACD,YAAG,CAACC,QAAJ,EAAc;AACV,mBAAO,oBAAP;AACH;AACJ,KAPD,MAOO;AACH,YAAGD,SAASE,MAAT,GAAiB,CAAjB,IAAsBF,SAASE,MAAT,GAAiB,EAA1C,EAA8C;AAC1C,mBAAO,4CAAP;AACH;AACD,YAAGD,SAASC,MAAT,GAAgB,CAAhB,IAAqBD,SAASC,MAAT,GAAgB,EAAxC,EAA4C;AACxC,mBAAO,4CAAP;AACH;AACJ;AACJ,WAAO,EAAP;AACA,CArBM","file":"util.js","sourcesContent":["import jwt, { decode } from 'jsonwebtoken';\r\nimport config from '../config.js';\r\nimport validator from 'validator';\r\n\r\n//Generate token base on email, role and expiration time of token\r\nexport const generateToken = (code) => {\r\n    return jwt.sign({ code }, config.secret)\r\n}\r\n//giaima \r\nexport const verifyToken = (token, callback) => {\r\n    jwt.verify(token, config.secret, (err, decoded) => {\r\n        if (err) {\r\n            callback(err)\r\n        }\r\n        return callback(null, decoded)\r\n    })\r\n}\r\n\r\nexport const generateTokenUser = (username, role, userId) => {\r\n    return jwt.sign({ username, role, userId }, config.secret, { expiresIn: '10h' });\r\n}\r\n//validate form login\r\nexport const validateUserInfo = (info) => {\r\n    if(!info) {\r\n        return 'No user information found'\r\n    }\r\n    const {userName, passWord } = info;\r\n    if(!userName || !passWord) {\r\n        if(!userName) {\r\n            return 'UserName is a must';\r\n        } \r\n        if(!passWord) {\r\n            return \"Password is a must\";\r\n        }\r\n    } else {\r\n        if(userName.length <6 || userName.length >30) {\r\n            return \"Username must be between 6 to 30 character\";\r\n        }\r\n        if(passWord.length<6 || passWord.length>30) {\r\n            return \"Password must be between 6 to 30 character\";\r\n        }\r\n    }\r\n\treturn '';\r\n}"]}