{"version":3,"sources":["../../src/lib/excelUtil.js"],"names":["readFileCsv","csvFilePath","callback","fromFile","on","jsonObj"],"mappings":";;;;;;;AAEA;;;;;;2cAFA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA;AAAA,qEAAc,iBAAOC,WAAP,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEjB,2BACHC,QADG,CACMF,WADN,EAEHG,EAFG,CAEA,MAFA,EAEQ,UAACC,OAAD,EAAa;AACvB,qBAAOH,SAAS,IAAT,EAAeG,OAAf,CAAP;AACD,aAJG,CAFiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAQhBH,qBARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"excelUtil.js","sourcesContent":["// import Excel from 'exceljs';\n// import mongoXlsx from 'mongo-xlsx';\nimport csv from 'csvtojson'\n\n//use mongo-xlsx\n// export const exportQues = async (data, callback) => {\n//   let model = mongoXlsx.buildDynamicModel(data)\n//   try {\n//     return await mongoXlsx.mongoData2Xlsx(data, model, (err, data) => {\n//       return callback(data.fullPath)\n//     })\n//   } catch (err) {\n//     return err\n//   }\n// }\nexport const readFileCsv = async (csvFilePath, callback) => {\n  try {\n    await csv()\n      .fromFile(csvFilePath)\n      .on('json', (jsonObj) => {\n        return callback(null, jsonObj)\n      })\n  } catch (err) {\n    return callback(err)\n  }\n}\n\n"]}