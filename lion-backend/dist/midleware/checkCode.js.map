{"version":3,"sources":["../../src/midleware/checkCode.js"],"names":["checkToken","req","res","next","token","headers","err","decoded","message","error","success","code","status","json","checkTokenRole","userToken","usertoken","jwt","verify","config","secret","role"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACO,IAAMA;AAAA,uEAAa,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,6BADgB,GACRH,IAAII,OAAJ,CAAYD,KADJ;;AAAA,6BAEnBA,KAFmB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGZ,uBAAYA,KAAZ,EAAmB,UAACE,GAAD,EAAMC,OAAN,EAAkB;AACvC,gCAAGD,GAAH,EAAQ;AAAA,oCACIE,OADJ,GACgBF,GADhB,CACIE,OADJ;;AAEJ,uCAAO;AACHC,2CAAO;AACHC,iDAAS,KADN;AAEHF;AAFG;AADJ,iCAAP;AAMH,6BARD,MAQO;AAAA,oCACKG,IADL,GACcJ,OADd,CACKI,IADL;;AAEHV,oCAAIU,IAAJ,GAAWA,IAAX;AACAR;AACH;AACJ,yBAdK,CAHY;;AAAA;AAAA;AAAA;;AAAA;AAmBlBD,4BAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBH,qCAAS,KADQ;AAEjBF,qCAAS;AAFQ,yBAArB;;AAnBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;AAyBA,IAAMM,0CAAiB,SAAjBA,cAAiB,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9C,QAAMY,YAAYd,IAAII,OAAJ,CAAYW,SAA9B;AACA,QAAGD,SAAH,EAAa;AACT,eAAOE,uBAAIC,MAAJ,CAAWH,SAAX,EAAsBI,iBAAOC,MAA7B,EAAqC,UAACd,GAAD,EAAMC,OAAN,EAAkB;AAC1D,gBAAID,GAAJ,EAAS;AAAA,oBACGE,OADH,GACeF,GADf,CACGE,OADH;;AAEL,uBAAO;AACHC,2BAAO;AACHC,iCAAS,KADN;AAEHF;AAFG;AADJ,iBAAP;AAMH,aARD,MAQO;AAAA,oBACGa,IADH,GACYd,OADZ,CACGc,IADH;;AAEH,wBAAQA,IAAR;AACI,yBAAK,CAAL;AACIA,+BAAO,OAAP;AACA;AACJ,yBAAK,CAAL;AACIA,+BAAO,QAAP;AACA;AACJ,yBAAK,CAAL;AACIA,+BAAO,IAAP;AACA;AACJ,yBAAK,CAAL;AACIA,+BAAO,SAAP;AACJ,yBAAK,CAAL;AACIA,+BAAO,WAAP;AAbR;AAeApB,oBAAIoB,IAAJ,GAAWA,IAAX;AACAlB;AACH;AACJ,SA7BM,CAAP;AA8BH,KA/BD,MA+BO;AACHD,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBH,qBAAS,KADQ;AAEjBF,qBAAS;AAFQ,SAArB;AAIH;AACJ,CAvCM","file":"checkCode.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\nimport  { verifyToken } from '../lib/util';\r\nexport const checkToken = async(req, res, next) => {\r\n    const token = req.headers.token;\r\n    if(token){\r\n        await verifyToken(token, (err, decoded) => {\r\n            if(err) {\r\n                const { message } = err;\r\n                return {\r\n                    error: {\r\n                        success: false,\r\n                        message\r\n                    }\r\n                }   \r\n            } else {\r\n                const { code } = decoded;\r\n                req.code = code;\r\n                next();\r\n            }\r\n        })\r\n    } else {\r\n        res.status(401).json({\r\n            success: false,\r\n            message: \"No token provided\",\r\n        });\r\n    }\r\n}\r\nexport const checkTokenRole = (req, res, next) => {\r\n    const userToken = req.headers.usertoken;\r\n    if(userToken){\r\n        return jwt.verify(userToken, config.secret, (err, decoded) => {\r\n            if (err) {\r\n                const { message } = err;\r\n                return {\r\n                    error: {\r\n                        success: false,\r\n                        message\r\n                    }\r\n                }   \r\n            } else {\r\n                let { role } = decoded;\r\n                switch (role) {\r\n                    case 1:\r\n                        role = \"Admin\";\r\n                        break;\r\n                    case 2:\r\n                        role = \"Design\";\r\n                        break;\r\n                    case 3:\r\n                        role = \"Hr\";\r\n                        break;\r\n                    case 4:\r\n                        role = \"Fresher\";\r\n                    case 5: \r\n                        role = \"Candidate\";\r\n                }\r\n                req.role = role;\r\n                next();\r\n            }\r\n        })  \r\n    } else {\r\n        res.status(401).json({\r\n            success: false,\r\n            message: \"No token provided\",\r\n        });\r\n    }\r\n};\r\n\r\n\r\n"]}